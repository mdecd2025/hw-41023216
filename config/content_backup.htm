<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>41023216</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-41023216/">https://mdecd2025.github.io/hw-41023216/</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-41023216">https://github.com/mdecd2025/hw-41023216 </a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表</p>
<h1>Tasks</h1>
<h2>task1</h2>
<h4>自行製作可攜程式系統</h4>
<p>此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境.</p>
<p>以下為操作步驟:</p>
<ol>
<li>下載<span> </span><a href="http://229.cycu.org/portable_python311.7z">portable_python311.7z</a>, 展開後是一套尚未安裝 pip 的 Python 3.11 可攜程式環境.</li>
<li>雙點擊 portable_python311 目錄中的 start_ipv6.bat 啟動可攜系統, 在 SciTE 中開啟 Y:\<a href="https://mdecd2025.github.io/hw-scrum-1/downloads/gen_python313.py">gen_python313.py</a>, 以下拉式功能表 Tools - Go 執行, 便可在 Y:\ 建立 Python313 目錄.</li>
<li>接著修改 start_ipv6.bat, 利用 Search - Replace, Find 欄位填上 Python311, Replace 欄位填上 Python313 後, 按下 Replace All, 便可將啟動檔中所有 Python311 設定改為 Python313, 另存修改後的檔案為 start_python313.bat.</li>
<li>接下來以 stop.bat 關閉 start_ipv6.bat 開啟的可攜系統, 改以心建立的 start_python313.bat 開啟可攜環境, 之後在命令列輸入 python, 確認目前的 Python 版本為 3.13.2 後, 利用 Ctrl + z 退出 Python 後, 利用 pip list 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具.</li>
<li>在命令列中, 以 python get-pip.py 安裝 pip 工具, 完成後, 以 pip list 確認 pip.exe 已經配置完成.</li>
<li>最後在命令列中, 以 pip install flask flask_cors bs4 lxml pelican markdown 安裝 cmsimde 網際內容管理系統啟動所需的 Python 模組後, 此可攜系統中的 Python 3.13.2 套件已經可以用來維護個人作業倉儲與分組倉儲.</li>
<li>之後利用新版的<span> </span><a href="https://www.scintilla.org/SciTEDownload.html">SciTE</a>,<span> </span><a href="https://git-scm.com/downloads/win">Portablegit</a>,<span> </span><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PUTTY</a>,<span> </span><a href="https://github.com/ShareX/ShareX/releases">ShareX</a>,<span> </span><a href="https://www.debugmode.com/wink.html">Wink</a>,<span> </span><a href="https://solvespace.com/download.pl">Solvespace</a>,<span> </span><a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/zoomit">Zoomit</a>,<span> </span><a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/process-explorer#download">ProcessExplorer</a><span> </span>以及原有的 tmp 及 home_ipv6, 以新的 start_python313 啟動.</li>
</ol>
<p>以下為操作影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/wAlFl1lNQv0" title="41023216 協同產品設計實習 自行建立可攜程式系統" width="640"></iframe></p>
<h3>list</h3>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?
src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2b_group.py">列出 2b 分組網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/29173e8b73ad422fd7c44bcd93658a3579d63633/list_stage_3.py">列出 2b 學員作業網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/48af059c96052719dc03d5fe8ee8af9a6033afc7/w4_2b_ipv6_stud_num.py">2b IPv6 port 8000 連線列表</a></p>
<p>個人網站/倉儲:</p>
<p>2b:</p>
<p><span>41023213：</span><a href="https://mdecd2025.github.io/hw-41023213/">https://mdecd2025.github.io/hw-41023213/</a> </p>
<p>                 <a href="https://github.com/mdecd2025/hw-41023213">https://github.com/mdecd2025/hw-41023213</a></p>
<p><span>41023215：</span><a href="https://mdecd2025.github.io/hw-41023215/">https://mdecd2025.github.io/hw-41023215/</a></p>
<p>                 <a href="https://github.com/mdecd2025/hw-41023215">https://github.com/mdecd2025/hw-41023215</a></p>
<p><span>41023216: <a href="https://mdecd2025.github.io/hw-41023216/">https://mdecd2025.github.io/hw-41023216/</a></span></p>
<p><span>                 <a href="https://github.com/mdecd2025/hw-41023216">https://github.com/mdecd2025/hw-41023216</a></span></p>
<p><span>41071202：<a href="https://mdecd2025.github.io/hw-41071202/">https://mdecd2025.github.io/hw-41071202/</a></span></p>
<p><span>                 <a href="https://github.com/mdecd2025/hw-41071202">https://github.com/mdecd2025/hw-41071202</a></span></p>
<p><span>41071203：</span><a href="https://mdecd2025.github.io/hw-41071203/">https://mdecd2025.github.io/hw-41071203/</a> </p>
<p>                 <a href="https://github.com/mdecd2025/hw-41071203">https://github.com/mdecd2025/hw-41071203</a></p>
<p><span>41071204：</span><a href="https://mdecd2025.github.io/hw-41071204/">https://mdecd2025.github.io/hw-41071204/</a></p>
<p>                 <a href="https://github.com/mdecd2025/hw-41071204">https://github.com/mdecd2025/hw-41071204</a></p>
<p></p>
<p>分組:</p>
<p>2b: <span> </span></p>
<p>      <a href="https://mdecd2025.github.io/2b-g8/">https://mdecd2025.github.io/2b-g8/</a></p>
<p>      <a href="https://github.com/mdecd2025/2b-g8">https://github.com/mdecd2025/2b-g8</a></p>
<p></p>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?
src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2b_group.py"></a></p>
<h2>task2</h2>
<h4>使用 SSH 協定執行作業倉儲的推送</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/S-PhyOpH-fo" title="ssh" width="640"></iframe></p>
<p><a href="https://zh.wikipedia.org/zh-tw/Secure_Shell">SSH</a><span> </span>是一種加密的網路傳輸協定, PuTTY 則是可用於 Windows 環境的 SSH 協定工具, 其中支援遠端登入 (putty.exe) 與檔案傳輸工具 (psftp.exe).</p>
<p></p>
<p>使用 PuTTY 所建立的公私鑰進行 Github push 認證的步驟:</p>
<p>第一步:</p>
<p>若希望在 Windows 環境透過 git 指令, 使用 PuTTY 設定的 session (一個代表連線伺服器主機、私鑰位置與是否使用代理主機等資訊的字串), 執行 push, 必須要在啟動可攜環境時, 設定 GIT_SSH 環境變數, 將此變數指向 PuTTY 套件中的 plink.exe 位置 (也就是 set GIT_SSH=%Disk%:\putty\plink.exe).</p>
<p>第二步:</p>
<p>指定利用 PuTTY 的 SSH session 執行 git push 後, 必須在 Windows 操作系統中選擇一個字串, 作為 SSH 連線 session 名稱, 由於此設定必須指向 SSH 協定加密用的私鑰所在目錄位置, 因此設定 session 之前, 必須利用 puttygen.txt 建立一對公私鑰, 其中的公鑰為 OpenSSH 格式, 必須送到使用者 Github 帳號設定區 (Settings) 的 SSH and GPG keys 中.</p>
<p>第三步:</p>
<p>利用 puttygen.exe 建立公私鑰的方法, 是在執行 puttygen.exe 之後, 以滑鼠按下 Generate 之後, 讓滑鼠在 puttgen.exe 視窗中 key 下方的空白區域隨意移動, puttygen.exe 會根據滑鼠移動的位置隨機建立 OpenSSH 格式的公鑰, 以及配對的 PuTTY 格式的 Private Key (副檔名為 .ppk)</p>
<p>第四步:</p>
<p>接下來, 將 OpenSSH 格式的 Public Key 內容複製到個人 Github 帳號設定區的 SSH and GPG keys 中, 並以 puttygen.exe 執行視窗右下方的 Save private key 按鈕, 將私鑰 (假設為 myprivatekey.ppk) 存至 Y:\.</p>
<p>第五步:</p>
<p>接著啟動 PuTTY 中的 putty.exe, 在 Host Name (or IP Address) 欄位填入 github.com, 並確認 Connection Type 選用 SSH, 表示要透過 SSH 加密協定連線到 github.com.</p>
<p>第六步:</p>
<p>接著在 putty.exe 視窗下方的 Saved Sessions 填入一組字串, 此字串就是之後要遠端登入 github.com 設定 push 連線 URL 的 session 名稱, 在此假設選擇 "mysession(41023216)" 作為 session 名稱, 使用者可以自行選擇具有代表性的字串, 例如: 學號或簡短的英文姓名縮寫.</p>
<p>第七步:</p>
<p>在 putty.exe 視窗中填入 github.com 與 "41023216" 名稱之後, 點擊 Save 之後, 此 session 設定就會被 Windows 操作系統存入該台電腦的 Registry 登錄檔案中的 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 所在組態區. 此時可以在命令列中輸入 regedit 後進入登錄檔查看是否 41023216 已經存在.</p>
<p>第八步:</p>
<p>上列 "41023216" 設定完成且按下 Save 之後, 若再按下 Open, 採用 IPv4 網路連線的電腦應該已經可以透過 putty.exe 遠端連線至 github.com, 視窗中會出現 github.com 作為視窗標題, 且內容為 login as: 但一般使用者並沒有帳號可以直接透過 putty.exe 遠端登入到 github.com, 而只能在 session 設定完成後, 利用此 session 執行 git push.</p>
<p>第九步:</p>
<p>由於前面的 "41023216" 雖然已經存入 Windows 操作系統的登錄檔, 但並沒有設定 private key 的位置, 因此接下來要再開啟 putty.exe, load 進此一 session, 然後在此 session 設定左方的 Category: 下方的 Connection - SSH - Auth - Credentials 設定中的 Private key file for authentication: 區, 利用 Browse 選擇位於 Y:\ 的 myprivatekey.ppk 檔案. 選擇檔案完成後, 必須再回到 Catetory: 下方的 Session 區, 以右方的 Save 將附加私鑰位置設定的 session 存檔. 此時 Windows 登錄檔中的 "41023216" 除了代表要使用 SSH 連線到 github.com 之外, 還附帶指定了 myprivatekey.ppk 在 Y:\ 的位置.</p>
<p>第十步:</p>
<p>若上述設定是在電腦輔助設計室中的電腦進行, 必須利用命令列 regedit 指令, 進入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 位置, 利用滑鼠右鍵將此登錄設定檔案"匯出" 存入可攜程式 start_ipv6.bat 所在目錄, 此處假設命名為 41023216.reg, 使用者可以自行對 .reg 命名.</p>
<p>第十一步:</p>
<p>由於上列的 myprivatekey.ppk 存於可攜程式中的 Y:\, 因此當使用者利用 start_ipv6.bat 啟動可攜程式後, 就可以利用滑鼠雙點擊位於同目錄的 41023216.reg, 上述的 "41023216" 設定就會存入 Windows 操作系統的登錄檔中.</p>
<p>使用 PuTTY session 設定倉儲 .git/config 中的 URL</p>
<p>假設上列 "41023216" 對應中的 OpenSSH 格式公鑰是送到 Github 帳號為 scrum-1 學員的 SSH and GPG key 區域, 則 scrum-1 學員在啟動可攜系統後, 已經雙點擊 41023216.reg, 將前述 putty.exe 設定的 session 組態登錄設定回存至 Windows 操作系統中, 則 41023216 學員就可以將其近端作業倉儲中的 41023216 用於倉儲 .git/config 檔案的下方設定:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_91554">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">[remote </code><code class="js string">"origin"</code><code class="js plain">]</code></div>
<div class="line number2 index1 alt1"><code class="js spaces">    </code><code class="js plain">url = git@41023216:mdecd2025/2b-g8.git</code></div>
<div class="line number3 index2 alt2"><code class="js spaces">    </code><code class="js plain">fetch = +refs/heads/:refs/remotes/origin/</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>其中的 [remote "origin"] 表示當使用 git 指令中針對此倉儲 "origin" 是一個與遠端倉儲對應的字串代號, 代表其下兩項設定. url 代表此 "origin" 的倉儲連線網址, 而連線至此倉儲的協定是採遠端登入 (使用 Github 支援的 SSH 遠端登入協定), 且此遠端登入的帳號為 "git", 這是所有要使用 SSH 執行 git push 的用戶共同使用的登入帳號.</p>
<p>url 設定中 "@" 之後的 "41023216" 就是宣告要使用此電腦登錄檔中所設定的 session 名稱 (代表要連線到 github.com, 且帶的 myprivatekey.ppk, 準備在登入流程中與 github.com 中 mdewcm2025 帳號下的 hw-scrum-1 倉儲擁有者 (或帶有 repo 管理權限的帳號) 所登錄的 public keys 進行認證比對, 一旦通過認證, git push 指令就可以成功將改版資料推送到指定的倉儲區域.</p>
<h3>ipv6</h3>
<p><span>2b 各學員固定 IPv6 分配: 2001:288:6004:17:fff1:cd25:0000:b008</span><br/><span>gateway: 2001:288:6004:17::254</span><br/><span>dns server:</span><br/><span>2001:288:6004:17::3</span><br/><span>2001:b000:168::1</span></p>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?src=https://gist.githubusercontent.com/41023216/9e984bd34d911398681a154de93ce8b7/raw/91baff883da5df39839e094d485e58dee6135ae2/6-1.py">IPv6 port 8000 任務一</a></p>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?src=https://gist.githubusercontent.com/41023216/53137d5797468a192bd0f33cacc832bb/raw/c59be581247ce359c9970b9692bda70ba0e9fb6d/6-2.py">IPv6 port 8000 任務二</a></p>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?src=https://gist.githubusercontent.com/41023216/4a77d8ee3634a92407f5bf1035923f21/raw/5da3cb1d9c32abbb8a14ec2d269dd89f02879dc7/6-3.py">IPv6 port 8000 任務三</a></p>
<h3>W3</h3>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?src=https://gist.githubusercontent.com/41023216/c7ea121d854e1f99a9959208ed1316d0/raw/3f678fe3b4f242a255f5ffbf75da133dfd57ca34/65-.py">2b未分組</a></p>
<h2>task3</h2>
<h4>使用 Solvespace 建立平面四連桿系統零組件</h4>
<p><a href="/downloads/fourbar_slvs.7z">四連桿機構</a></p>
<p></p>
<h2>task4</h2>
<h4>使用 Onshape 建立平面四連桿系統零組件 (HW2)</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/DoceBBsspqg" title="操作片2" width="666"></iframe></p>
<h3>w5</h3>
<p><br/><br/><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/fT1Z3-ZQhyA" title="操作影片" width="666"></iframe></p>
<h3>w6</h3>
<p><img caption="false" height="225" src="/images/未命名.jpg" width="400"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/tCLktsdc8WY" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41023216" width="666"></iframe></p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/0y1bwYNXqv8" title="操作影片" width="666"></iframe></p>
<h2>task5</h2>
<h4>Webots Tutorial 1 ~3</h4>
<p><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a></p>
<ol>
<li>請用繁體中文詳細說明下列資料:<span> </span><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots </a></li>
<li>請整理<span> </span><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a><span> </span>中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明.</li>
<li>請摘要出下列內容: (放入英文文章內容)</li>
<li>請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法:</li>
<li>請詳細說明如何採手動方式在 Webots 建立下列場景:</li>
<li>希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意?</li>
</ol>
<h3>Blander</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/i0ygKKAabNs" title="Blender 換顏色" width="666"></iframe></p>
<h3>問題一</h3>
<p>Webots 是一款開源的機器人模擬平台，旨在幫助用戶開發和測試機器人應用。它提供了一個高度可定制的虛擬環境，可以用來模擬各種機器人系統。Webots 支援多種機器人模型，並允許用戶根據需求進行編程與測試。該平台包含圖形界面、物理引擎、場景設計工具及各種感測器與執行器的模擬功能，適用於教育、研究和工程領域。</p>
<p></p>
<h3>問題二</h3>
<p>由於我無法直接從外部網站抓取內容來進行詳細分析，但我可以根據網站的主題來幫助你整理與 Webots 相關的重要單字和文法結構。這些主要涉及機器人模擬、程序設計以及機器人控制的相關術語。我會先列出一些關鍵字並說明其用法，然後針對常見的英文文法結構進行解釋。</p>
<h4>1. 關鍵英文單字與用法</h4>
<ul>
<li>
<p><strong>Simulation</strong> (模擬)</p>
<ul>
<li>
<p>用法：This term refers to the imitation of the operation of a real-world process or system over time. It is commonly used in Webots to describe the virtual environment where robots are tested.</p>
</li>
<li>
<p>範例："The simulation environment in Webots allows users to model robots."</p>
</li>
</ul>
</li>
<li>
<p><strong>Robot</strong> (機器人)</p>
<ul>
<li>
<p>用法：A robot is typically an autonomous machine that can perform tasks traditionally done by humans.</p>
</li>
<li>
<p>範例："Webots provides tools to design and control robots."</p>
</li>
</ul>
</li>
<li>
<p><strong>Environment</strong> (環境)</p>
<ul>
<li>
<p>用法：This refers to the space or setting in which something operates, in this case, the virtual space where the robot interacts.</p>
</li>
<li>
<p>範例："The virtual environment is highly customizable."</p>
</li>
</ul>
</li>
<li>
<p><strong>Sensor</strong> (感測器)</p>
<ul>
<li>
<p>用法：Sensors allow the robot to perceive its environment, such as cameras, GPS, or distance sensors.</p>
</li>
<li>
<p>範例："Webots supports various sensor models like cameras, GPS, and accelerometers."</p>
</li>
</ul>
</li>
<li>
<p><strong>Controller</strong> (控制器)</p>
<ul>
<li>
<p>用法：A controller in Webots refers to the software that runs on the robot to process input from sensors and control actions.</p>
</li>
<li>
<p>範例："You can write a controller in Python or C to control the robot."</p>
</li>
</ul>
</li>
<li>
<p><strong>Actuator</strong> (執行器)</p>
<ul>
<li>
<p>用法：An actuator is a device that performs actions such as moving a robot's arm or wheels.</p>
</li>
<li>
<p>範例："The motors are actuators that allow the robot to move."</p>
</li>
</ul>
</li>
<li>
<p><strong>Programming Interface</strong> (程式設計介面)</p>
<ul>
<li>
<p>用法：This is a set of tools and libraries that allow users to write software to interact with Webots and control the robot.</p>
</li>
<li>
<p>範例："Webots provides a comprehensive programming interface for Python, C, and C++."</p>
</li>
</ul>
</li>
</ul>
<h4>2. 英文文法結構逐句分析</h4>
<p>假設有一段來自 Webots 介紹的句子，我會解釋其文法結構。</p>
<h4>例句 1:</h4>
<p>"Webots is an open-source robot simulation software."</p>
<ul>
<li>
<p><strong>Webots</strong>：主詞 (Subject)</p>
</li>
<li>
<p><strong>is</strong>：動詞 (Verb)，是“to be”動詞，表示“是”</p>
</li>
<li>
<p><strong>an open-source robot simulation software</strong>：名詞片語，作為補語 (Complement)，描述 Webots 是什麼樣的軟體。</p>
<ul>
<li>
<p><strong>open-source</strong>：形容詞，表示“開源的”</p>
</li>
<li>
<p><strong>robot simulation</strong>：名詞，表示“機器人模擬”</p>
</li>
<li>
<p><strong>software</strong>：名詞，表示“軟體”</p>
</li>
</ul>
</li>
</ul>
<h4>例句 2:</h4>
<p>"Users can create complex simulations using Webots."</p>
<ul>
<li>
<p><strong>Users</strong>：主詞 (Subject)</p>
</li>
<li>
<p><strong>can create</strong>：情態動詞 "can" + 動詞原形 "create"，表示能力或許可</p>
</li>
<li>
<p><strong>complex simulations</strong>：名詞片語，作為受詞 (Object)，表示用戶可以創建的內容</p>
<ul>
<li>
<p><strong>complex</strong>：形容詞，表示“複雜的”</p>
</li>
<li>
<p><strong>simulations</strong>：名詞，表示“模擬”</p>
</li>
</ul>
</li>
<li>
<p><strong>using Webots</strong>：介系詞片語，表示動作發生的方式或工具，這裡表示是使用 Webots 進行創建。</p>
</li>
</ul>
<h4>例句 3:</h4>
<p>"To begin using Webots, download the software and follow the installation instructions."</p>
<ul>
<li>
<p><strong>To begin using Webots</strong>：不定詞片語，作為動詞 "begin" 的受詞，表示開始的動作。</p>
<ul>
<li>
<p><strong>begin</strong>：動詞，表示“開始”</p>
</li>
<li>
<p><strong>using</strong>：動名詞，表示“使用”</p>
</li>
<li>
<p><strong>Webots</strong>：名詞，表示“Webots”</p>
</li>
</ul>
</li>
<li>
<p><strong>download the software</strong>：命令句，動詞 “download” 命令讀者下載</p>
</li>
<li>
<p><strong>and</strong>：連接詞，連接兩個動作</p>
</li>
<li>
<p><strong>follow the installation instructions</strong>：命令句，動詞 “follow” 命令讀者跟隨指示。</p>
<ul>
<li>
<p><strong>installation instructions</strong>：名詞片語，表示“安裝指示</p>
</li>
</ul>
</li>
</ul>
<p></p>
<h3>問題三</h3>
<h4 class="anchor-header" id="tutorial3appearance20minutes" name="tutorial-3-appearance-20-minutes">Tutorial 3: Appearance (20 Minutes)</h4>
<p>The aim of this tutorial is to familiarize yourself with some nodes related to the graphical rendering. Good looking simulations can be created very quickly when these nodes are used adequately. A good graphics quality does not only enhance the user's experience, it is also essential for simulations where robots perceive their environment (camera image processing, line following, etc.).</p>
<p>The result at the end of this tutorial is shown in<span> </span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#simulation-after-having-setup-the-light-and-the-pbrappearance-nodes">this figure</a>.</p>
<h4 id="indexTitle">Index</h4>
<ul id="index">
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#new-simulation">New Simulation</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#lights">Lights</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#modify-the-appearance-of-the-walls">Modify the Appearance of the Walls</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#add-an-existing-appearance-to-the-ball">Add an Existing Appearance to the Ball</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#add-a-texture-from-disk">Add a Texture from Disk</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#rendering-options">Rendering Options</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#solution-world-file">Solution: World File</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#conclusion">Conclusion</a></li>
</ul>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#new-simulation"><span class="anchor-link-image"></span></a>New Simulation</p>
<blockquote>
<p><strong>Hands-on #1</strong>: From the results of the previous tutorial, create a new simulation called "appearance.wbt" by using the<span> </span><code>File / Save World As...</code><span> </span>menu.</p>
</blockquote>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#lights"><span class="anchor-link-image"></span></a>Lights</p>
<p>The lighting of a world is determined by<span> </span><a href="https://cyberbotics.com/doc/reference/light">Light</a><span> </span>nodes and the<span> </span><a href="https://cyberbotics.com/doc/reference/background">Background</a><span> </span>. There are three types of light nodes: the<span> </span><a href="https://cyberbotics.com/doc/reference/directionallight">DirectionalLight</a>, the<span> </span><a href="https://cyberbotics.com/doc/reference/pointlight">PointLight</a><span> </span>and the<span> </span><a href="https://cyberbotics.com/doc/reference/spotlight">SpotLight</a>. A<span> </span><a href="https://cyberbotics.com/doc/reference/directionallight">DirectionalLight</a><span> </span>simulates a light which is infinitely far (ex: the sun), a<span> </span><a href="https://cyberbotics.com/doc/reference/pointlight">PointLight</a><span> </span>simulates light emitted from a single point (ex: a light bulb), and a<span> </span><a href="https://cyberbotics.com/doc/reference/spotlight">SpotLight</a><span> </span>simulates a conical light (ex: a flashlight).<span> </span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#comparison-of-the-three-lighting-possible-in-webots-left-directionallight-middle-spotlight-and-right-pointlight">This figure</a><span> </span>shows a comparison between them. Each type of light node can cast shadows. You can find their complete documentation in the<span> </span><a href="https://cyberbotics.com/doc/reference/nodes-and-api-functions">Reference Manual</a>.</p>
<figure name="comparison-of-the-three-lighting-possible-in-webots-left-directionallight-middle-spotlight-and-right-pointlight"><img alt="tutorial_light_comparison.png" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/tutorial_light_comparison.thumbnail.jpg"/>
<figcaption class="anchor-header"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#comparison-of-the-three-lighting-possible-in-webots-left-directionallight-middle-spotlight-and-right-pointlight"><span class="anchor-link-image"></span></a>Comparison of the three lighting possible in Webots. Left DirectionalLight, middle SpotLight and right PointLight.</figcaption>
</figure>
<p>Lights are costly in term of performance and reduce the simulation speed (especially when they cast shadows). Minimizing the number of lights increases the rendering speed. A<span> </span><a href="https://cyberbotics.com/doc/reference/pointlight">PointLight</a><span> </span>is more efficient than a<span> </span><a href="https://cyberbotics.com/doc/reference/spotlight">SpotLight</a>, but less than a<span> </span><a href="https://cyberbotics.com/doc/reference/directionallight">DirectionalLight</a>.</p>
<p>In this simulation, the<span> </span><a href="https://cyberbotics.com/doc/reference/light">Light</a><span> </span>node is not visible in the scene tree because it is contained in the<span> </span><a href="https://webots.cloud/run?url=https://github.com/cyberbotics/webots/blob/released/projects/objects/backgrounds/protos/TexturedBackgroundLight.proto" target="_blank">TexturedBackgroundLight</a><span> </span>PROTO node. It consists of a<span> </span><a href="https://cyberbotics.com/doc/reference/directionallight">DirectionalLight</a><span> </span>whose intensity and direction is computed automatically according to the background of the scene.</p>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#modify-the-appearance-of-the-walls"><span class="anchor-link-image"></span></a>Modify the Appearance of the Walls</p>
<p>The aim of this subsection is to color the walls in blue.</p>
<p>The<span> </span><a href="https://cyberbotics.com/doc/reference/appearance">Appearance</a><span> </span>and<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a><span> </span>nodes of the<span> </span><a href="https://cyberbotics.com/doc/reference/shape">Shape</a><span> </span>node determine the graphical appearance of the object. Among other things, these nodes are responsible for the color and texture of objects.</p>
<p>Prefer<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearances</a><span> </span>for a better rendering as shown in the following comparison.</p>
<figure name="comparison-between-appearance-node-left-and-pbrappearance-node-right"><img alt="tutorial_appearance_comparison.png" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/tutorial_appearance_comparison.thumbnail.jpg"/>
<figcaption class="anchor-header"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#comparison-between-appearance-node-left-and-pbrappearance-node-right"><span class="anchor-link-image"></span></a>Comparison between Appearance node (left) and PBRAppearance node (right).</figcaption>
</figure>
<blockquote>
<p><strong>Hands-on #2</strong>: In the<span> </span><a href="https://cyberbotics.com/doc/reference/shape">Shape</a><span> </span>node representing graphically the first wall, add a<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a><span> </span>node to the<span> </span><code>appearance</code><span> </span>field.</p>
<ol>
<li>Set its<span> </span><code>baseColor</code><span> </span>field to blue using the color selector.</li>
<li>Set its<span> </span><code>metalness</code><span> </span>field to 0 using the field editor.</li>
<li>Finally, set its<span> </span><code>roughness</code><span> </span>field to 0.5 using the field editor.</li>
<li>If the DEF-USE mechanism of the previous tutorial has been correctly implemented, all the walls should turn blue.</li>
</ol>
</blockquote>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#add-an-existing-appearance-to-the-ball"><span class="anchor-link-image"></span></a>Add an Existing Appearance to the Ball</p>
<p>A number of pre-defined<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a><span> </span>are provided in the Webots release.</p>
<blockquote>
<p><strong>Hands-on #3</strong>: Add a pre-defined<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a></p>
<ol>
<li>Select the<span> </span><code>appearance</code><span> </span>field and remove the previously added node. To do this, either press the "delete" button on your keyboard or right-click on the field and select "delete" from the menu. The field should now say "appearance NULL" instead of "appearance PBRAppearance".</li>
<li>Double-click on the field again, then navigate to<span> </span><code>PROTO nodes (Webots Projects)</code>, then<span> </span><code>appearances</code><span> </span>and select<span> </span><code>OldSteel (PBRAppearance)</code>.</li>
</ol>
</blockquote>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#add-a-texture-from-disk"><span class="anchor-link-image"></span></a>Add a Texture from Disk</p>
<p>The aim of this subsection is to apply a locally available texture to the ball. A texture on a rolling object can help to appreciate its movement.</p>
<blockquote>
<p>Hands-on #4: add a locally available texture to the ball.</p>
<ol>
<li>Download the texture available<span> </span><a href="https://raw.githubusercontent.com/cyberbotics/webots/released/projects/default/worlds/textures/red_brick_wall.jpg" target="_blank">here</a><span> </span>and save it to your disk.</li>
<li>Remove the previously added node from the<span> </span><code>appearance</code><span> </span>field and add a<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a><span> </span>node instead.</li>
<li>Add an<span> </span><a href="https://cyberbotics.com/doc/reference/imagetexture">ImageTexture</a><span> </span>node to the<span> </span><code>baseColorMap</code><span> </span>field of the<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a><span> </span>node.</li>
<li>Add an item to the<span> </span><a href="https://cyberbotics.com/doc/reference/imagetexture">ImageTexture</a>'s<span> </span><code>url</code><span> </span>field using the<span> </span><code>Add</code><span> </span>button.</li>
<li>Then set the value of the newly added<span> </span><code>url</code><span> </span>item using the "Select" button.</li>
<li>Follow the path to the location where you saved the texture and select it.</li>
</ol>
</blockquote>
<p>The texture URLs must be defined either relative to the<span> </span><code>worlds</code><span> </span>directory of your project directory or relative to the default project directory<span> </span><a href="https://github.com/cyberbotics/webots/tree/released/projects/default/worlds" target="_blank"><code>WEBOTS_HOME/projects/default/worlds</code></a>.</p>
<p>Open the<span> </span><code>red_brick_wall.jpg</code><span> </span>texture in an image viewer while you observe how it is mapped onto the<span> </span><a href="https://cyberbotics.com/doc/reference/sphere">Sphere</a><span> </span>node in Webots.</p>
<p>Textures are mapped onto Geometry nodes according to predefined<span> </span><strong>UV mapping</strong><span> </span>functions described in the<span> </span><a href="https://cyberbotics.com/doc/reference/imagetexture">Reference Manual</a>. A UV mapping function maps a 2D image representation to a 3D model.</p>
<figure name="simulation-after-having-setup-the-light-and-the-pbrappearance-nodes"><img alt="tutorial_appearance.png" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/tutorial_appearance.thumbnail.jpg"/>
<figcaption class="anchor-header"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#simulation-after-having-setup-the-light-and-the-pbrappearance-nodes"><span class="anchor-link-image"></span></a>Simulation after having setup the Light and the `PBRAppearance` nodes.</figcaption>
</figure>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#rendering-options"><span class="anchor-link-image"></span></a>Rendering Options</p>
<p>Webots offers several rendering modes available in the<span> </span><code>View</code><span> </span>menu.</p>
<blockquote>
<p><strong>Hands-on #5</strong>: View the simulation in wireframe mode by using the<span> </span><code>View / Wireframe Rendering</code><span> </span>menu item. Then restore the plain rendering mode:<span> </span><code>View / Plain Rendering</code>.</p>
</blockquote>
<p>Others rendering features can be helpful:</p>
<ul>
<li>View Coordinates systems:<span> </span><code>View / Optional Rendering / Show Coordinates System</code><span> </span><kbd>ctrl</kbd>-<kbd>F1</kbd></li>
<li>View distance sensor rays:<span> </span><code>View / Optional Rendering / Show DistanceSensor Rays</code><span> </span><kbd>ctrl</kbd>-<kbd>F10</kbd></li>
</ul>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#solution-world-file"><span class="anchor-link-image"></span></a>Solution: World File</p>
<p>To compare your world with the solution, go to your files and find the folder named "my_first_simulation" created in<span> </span><a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots">Tutorial 1</a>, then go to the "worlds" folder and open with a text editor the right world.<span> </span><a href="https://github.com/cyberbotics/webots/tree/released/projects/samples/tutorials/worlds/appearance.wbt" target="_blank">This solution</a><span> </span>as the others is located in the<span> </span><a href="https://github.com/cyberbotics/webots/tree/released/projects/samples/tutorials/worlds/" target="_blank">solution directory</a>.</p>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#conclusion"><span class="anchor-link-image"></span></a>Conclusion</p>
<p>In this tutorial, you have learned how to set up a good looking environment using the<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a><span> </span>node and the light nodes.</p>
<p>You can go further on this topic by reading the detailed description of these nodes in the<span> </span><code>Reference Manual</code>. This<span> </span><a href="https://github.com/cyberbotics/webots/discussions/5411" target="_blank">FAQ</a><span> </span>will give you a method to efficiently setup these nodes.</p>
<h3>問題四</h3>
<p>以下是您提供的文章中的重要英文單字和用法解釋：</p>
<p><br/>1. <strong>Appearance</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：外觀，表示物體的視覺外形或表面。</p>
</li>
<li>
<p><strong>用法</strong>：The <strong>Appearance</strong> and <strong>PBRAppearance</strong> nodes of the Shape node determine the graphical appearance of the object.</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話中，"Appearance" 指的是影響物體視覺呈現的節點，這些節點可以控制顏色、質感等視覺屬性。</p>
</li>
</ul>
</li>
</ul>
<p><br/>2. <strong>PBRAppearance</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：一種圖形渲染節點，能夠提供更高質量的渲染效果，適合用於更真實的光照與材質效果。</p>
</li>
<li>
<p><strong>用法</strong>：Prefer <strong>PBRAppearance</strong> for a better rendering.</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話建議使用 <strong>PBRAppearance</strong> 節點，因為它能提供更好的渲染效果。</p>
</li>
</ul>
</li>
</ul>
<p><br/>3. <strong>DirectionalLight</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：一種光源節點，模擬無限遠的光源（例如太陽）。</p>
</li>
<li>
<p><strong>用法</strong>：A <strong>DirectionalLight</strong> simulates a light which is infinitely far (ex: the sun).</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話解釋了 <strong>DirectionalLight</strong> 是如何模擬類似太陽的光源，並且不受距離影響。</p>
</li>
</ul>
</li>
</ul>
<p><br/>4. <strong>PointLight</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：一種光源節點，模擬從單一點發射的光（例如燈泡）。</p>
</li>
<li>
<p><strong>用法</strong>：A <strong>PointLight</strong> simulates light emitted from a single point (ex: a light bulb).</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話解釋了 <strong>PointLight</strong> 的工作原理，與 <strong>DirectionalLight</strong> 不同，它的光線是從某個具體位置發射出來的。</p>
</li>
</ul>
</li>
</ul>
<p><br/>5. <strong>SpotLight</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：一種聚光燈光源節點，模擬圓錐形的光束（例如手電筒）。</p>
</li>
<li>
<p><strong>用法</strong>：A <strong>SpotLight</strong> simulates a conical light (ex: a flashlight).</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話指出 <strong>SpotLight</strong> 是模擬集中光束的光源，通常用於強調特定區域。</p>
</li>
</ul>
</li>
</ul>
<p><br/>6. <strong>Light nodes</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：指的是 Webots 中控制燈光的節點，通常用於設定場景中的光源。</p>
</li>
<li>
<p><strong>用法</strong>：The lighting of a world is determined by <strong>Light nodes</strong> and the Background.</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話指出，場景的燈光是由 <strong>Light nodes</strong> 和背景設定所決定的。</p>
</li>
</ul>
</li>
</ul>
<p><br/>7. <strong>Texture</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：紋理，通常是用來增加物體表面細節的圖像或模式。</p>
</li>
<li>
<p><strong>用法</strong>：Add a <strong>Texture</strong> from Disk.</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話指示將磁碟上的圖像作為紋理添加到物體上。</p>
</li>
</ul>
</li>
</ul>
<p><br/>8. <strong>Rendering</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：渲染，指的是將數位模型轉換為視覺圖像的過程。</p>
</li>
<li>
<p><strong>用法</strong>：A good graphics quality does not only enhance the user's experience, it is also essential for simulations where robots perceive their environment (camera image processing, line following, etc.).</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話講述了渲染對於改善用戶體驗和機器人環境感知的重要性。</p>
</li>
</ul>
</li>
</ul>
<p><br/>9. <strong>Wireframe Mode</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：線框模式，指的是在渲染時僅顯示物體的輪廓，而不顯示詳細的表面。</p>
</li>
<li>
<p><strong>用法</strong>：View the simulation in <strong>wireframe mode</strong> by using the View / Wireframe Rendering menu item.</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話指示如何啟用線框模式以查看簡化的物體結構。</p>
</li>
</ul>
</li>
</ul>
<p><br/>10. <strong>World File</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：世界檔案，指的是包含場景和物體設置的檔案，通常是以 <code inline="">.wbt</code> 檔案格式儲存。</p>
</li>
<li>
<p><strong>用法</strong>：To compare your world with the solution, go to your files and find the folder named "my_first_simulation".</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話教導如何找到世界檔案並與解決方案進行比較。</p>
</li>
</ul>
</li>
</ul>
<p><br/>11. <strong>UV Mapping</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：UV映射，將二維圖像（紋理）映射到三維模型表面的一種技術。</p>
</li>
<li>
<p><strong>用法</strong>：Textures are mapped onto Geometry nodes according to predefined <strong>UV mapping</strong> functions.</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話說明了如何將紋理應用到幾何物件的表面，並依照預設的 <strong>UV映射</strong> 函數來處理。</p>
</li>
</ul>
</li>
</ul>
<hr/>
<h4>重要文法結構解釋：</h4>
<ol>
<li>
<p><strong>The aim of this tutorial is to familiarize yourself with some nodes related to the graphical rendering.</strong></p>
<ul>
<li>
<p><strong>文法結構</strong>：主語 + is + 不定詞片語</p>
</li>
<li>
<p><strong>解釋</strong>：這句話使用了不定詞片語 "to familiarize yourself" 來表達教程的目的是讓你熟悉與圖形渲染相關的節點。</p>
</li>
</ul>
</li>
<li>
<p><strong>A DirectionalLight simulates a light which is infinitely far (ex: the sun).</strong></p>
<ul>
<li>
<p><strong>文法結構</strong>：名詞 + 動詞 + 關係子句</p>
</li>
<li>
<p><strong>解釋</strong>：這句話介紹了 <strong>DirectionalLight</strong> 的功能，並使用了關係子句 "which is infinitely far" 來解釋 <strong>DirectionalLight</strong> 的特性。</p>
</li>
</ul>
</li>
<li>
<p><strong>Hands-on #1: From the results of the previous tutorial, create a new simulation called "appearance.wbt" by using the File / Save World As... menu.</strong></p>
<ul>
<li>
<p><strong>文法結構</strong>：命令句，動詞原形 + 受詞</p>
</li>
<li>
<p><strong>解釋</strong>：這是一個命令句，指示用戶根據前一教程的結果創建一個新的模擬，並指示如何操作。</p>
</li>
</ul>
</li>
<li>
<p><strong>If the DEF-USE mechanism of the previous tutorial has been correctly implemented, all the walls should turn blue.</strong></p>
<ul>
<li>
<p><strong>文法結構</strong>：條件句 + 主句</p>
</li>
<li>
<p><strong>解釋</strong>：這是條件句，說明如果之前教程中的 DEF-USE 機制已正確實現，那麼所有牆壁應該會變成藍色。</p>
</li>
</ul>
</li>
</ol>
<h3>問題五</h3>
<p>在 Webots 中建立一個場景並進行手動設置，可以分為幾個步驟來完成。以下是根據文章中的一些步驟說明如何手動建立場景，這些步驟包括創建新模擬、設置燈光、修改牆壁的外觀、將現有外觀應用於球體、從磁碟上添加紋理以及設置渲染選項。</p>
<p><br/>1. <strong>創建新模擬 (New Simulation)</strong></p>
<p>首先，我們需要創建一個新的模擬環境。以下是手動創建的步驟：</p>
<ol>
<li>
<p><strong>打開 Webots</strong>。</p>
</li>
<li>
<p><strong>選擇 File / New World</strong> 開啟一個新的場景。</p>
</li>
<li>
<p>為新的世界命名（例如，<code inline="">appearance.wbt</code>），然後保存它。</p>
</li>
</ol>
<p>這樣就會創建一個基礎的世界，你可以在此世界中添加物體、燈光、紋理等。</p>
<p><br/>2. <strong>設置燈光 (Lights)</strong></p>
<p>Webots 支援不同類型的燈光，這裡我們會使用三種燈光節點：<code inline="">DirectionalLight</code>、<code inline="">PointLight</code> 和 <code inline="">SpotLight</code>。設置燈光步驟如下：</p>
<ol>
<li>
<p>在左側的 <strong>Scene Tree</strong> 中右鍵點擊空白處，選擇 <strong>Add / Light</strong>。</p>
</li>
<li>
<p>你可以選擇不同的燈光節點：</p>
<ul>
<li>
<p><strong>DirectionalLight</strong>：模擬太陽光等無限遠的光源。</p>
</li>
<li>
<p><strong>PointLight</strong>：模擬燈泡等從一點發射的光。</p>
</li>
<li>
<p><strong>SpotLight</strong>：模擬手電筒等圓錐形光源。</p>
</li>
</ul>
</li>
<li>
<p>如果要加入陰影，可以在燈光節點中啟用 <strong>cast shadows</strong>。</p>
</li>
</ol>
<h4>進階設置：</h4>
<ul>
<li>
<p>每個燈光節點都可以調整顏色、強度和方向。</p>
</li>
<li>
<p>若要添加背景光，選擇 <strong>TexturedBackgroundLight</strong> 節點來實現背景燈光，這樣燈光強度和方向會根據場景的背景自動計算。</p>
</li>
</ul>
<p><br/>3. <strong>修改牆壁外觀 (Modify the Appearance of the Walls)</strong></p>
<p>為牆壁設定顏色和材質，我們將使用 <code inline="">Appearance</code> 或 <code inline="">PBRAppearance</code> 節點來設置外觀屬性。</p>
<ol>
<li>
<p>找到場景中的牆壁，通常會是 <strong>Shape</strong> 節點。</p>
</li>
<li>
<p>在 <strong>Shape</strong> 節點下，右鍵點擊 <strong>Appearance</strong> 或 <strong>PBRAppearance</strong> 節點。</p>
</li>
<li>
<p>設置以下屬性：</p>
<ul>
<li>
<p>設定 <strong>baseColor</strong> 為藍色（在顏色選擇器中選擇藍色）。</p>
</li>
<li>
<p><strong>metalness</strong> 設為 0，這會讓牆壁顯得更為光滑和不金屬化。</p>
</li>
<li>
<p><strong>roughness</strong> 設為 0.5，這會讓牆壁的質感略為粗糙。</p>
</li>
</ul>
</li>
</ol>
<p>這樣牆壁將會被設置為藍色，並且具有金屬化和粗糙度效果。</p>
<p><br/>4. <strong>為球體添加現有外觀 (Add an Existing Appearance to the Ball)</strong></p>
<p>Webots 提供了一些預定義的 <code inline="">PBRAppearance</code> 外觀，可以直接將其應用到物體上。</p>
<ol>
<li>
<p>找到場景中的球體節點（通常為 <strong>Shape</strong> 節點下的 <strong>Sphere</strong>）。</p>
</li>
<li>
<p>在 <strong>Appearance</strong> 字段中，右鍵點擊並選擇 <strong>Delete</strong> 來刪除當前的外觀。</p>
</li>
<li>
<p>再次點擊 <strong>Appearance</strong> 字段，選擇 <strong>PROTO nodes</strong>，然後選擇 <strong>OldSteel</strong> 或其他預設的外觀。</p>
</li>
<li>
<p>這樣，球體的外觀將會改變，並且應用你選擇的材質。</p>
</li>
</ol>
<p><br/>5. <strong>從磁碟上添加紋理 (Add a Texture from Disk)</strong></p>
<p>為物體添加紋理可以幫助增加真實感，尤其是對於旋轉物體，紋理會更顯得生動。</p>
<ol>
<li>
<p>下載你想要的紋理（例如 <code inline="">red_brick_wall.jpg</code>）。</p>
</li>
<li>
<p>在 Webots 中，選擇場景中的物體（例如，球體）。</p>
</li>
<li>
<p>在 <strong>Appearance</strong> 節點下，刪除當前的外觀。</p>
</li>
<li>
<p>添加 <strong>PBRAppearance</strong> 節點。</p>
</li>
<li>
<p>在 <strong>PBRAppearance</strong> 節點下，選擇 <strong>ImageTexture</strong> 節點，並將其拖放到 <strong>baseColorMap</strong> 欄位。</p>
</li>
<li>
<p>在 <strong>ImageTexture</strong> 的 <strong>url</strong> 字段中，使用 <strong>Add</strong> 按鈕來添加紋理的路徑，選擇剛剛下載的圖像文件。</p>
</li>
<li>
<p>確保圖片的 URL 是正確的，可以是相對路徑指向項目目錄中的 <code inline="">worlds</code> 目錄。</p>
</li>
</ol>
<p>當這些設置完成後，球體將顯示出你所選擇的紋理。</p>
<p><br/>6. <strong>設置渲染選項 (Rendering Options)</strong></p>
<p>Webots 提供了不同的渲染模式來查看模擬效果。</p>
<ol>
<li>
<p>在 Webots 界面中，選擇 <strong>View</strong> 菜單。</p>
</li>
<li>
<p>可以選擇不同的渲染模式：</p>
<ul>
<li>
<p><strong>Wireframe Rendering</strong>：以線框顯示模型，只顯示物體的輪廓。</p>
</li>
<li>
<p><strong>Plain Rendering</strong>：恢復常規渲染模式，顯示物體的完整外觀。</p>
</li>
</ul>
</li>
<li>
<p>還可以啟用其他視覺效果，如：</p>
<ul>
<li>
<p>顯示坐標系統：<strong>View / Optional Rendering / Show Coordinates System</strong>。</p>
</li>
<li>
<p>顯示距離傳感器光線：<strong>View / Optional Rendering / Show DistanceSensor Rays</strong>。</p>
</li>
</ul>
</li>
</ol>
<p>這些渲染模式可以幫助你更好地理解場景中的物體如何互動。</p>
<p><br/>7. <strong>保存和查看結果</strong></p>
<p>完成所有設置後，保存你的世界檔案。你可以通過 <strong>File / Save World</strong> 來保存，並使用 <strong>View</strong> 菜單中的渲染模式來查看最終結果。</p>
<h3>問題六</h3>
<p>好的！讓我們一步一步來介紹如何使用 <strong>Webots</strong> 的圖形介面來建立一個新的場景，並確保過程中不會遺漏任何重要的步驟。這些步驟包括創建新場景、設置燈光、修改物體外觀、應用紋理等。每一步都會有重點提醒，幫助你更順利地完成設置。</p>
<h4>步驟 1：創建新的模擬場景</h4>
<ol>
<li>
<p><strong>開啟 Webots</strong>。</p>
<ul>
<li>
<p>點擊開啟 <strong>Webots</strong> 應用程式。</p>
</li>
</ul>
</li>
<li>
<p><strong>創建新場景</strong>：</p>
<ul>
<li>
<p>點擊畫面上方的 <strong>File</strong> 菜單。</p>
</li>
<li>
<p>選擇 <strong>New World</strong>（新建世界），這樣就會創建一個空的模擬環境。</p>
</li>
</ul>
</li>
<li>
<p><strong>儲存新場景</strong>：</p>
<ul>
<li>
<p>點擊 <strong>File</strong> 菜單中的 <strong>Save World As...</strong>。</p>
</li>
<li>
<p>在對話框中為你的場景命名（例如 <code inline="">appearance.wbt</code>），並選擇儲存的文件夾位置。</p>
</li>
</ul>
</li>
</ol>
<h4>步驟 2：設置燈光</h4>
<ol>
<li>
<p><strong>選擇燈光類型</strong>：</p>
<ul>
<li>
<p>在左側 <strong>Scene Tree</strong> 中，右鍵點擊 <strong>root</strong>（根節點），選擇 <strong>Add / Light</strong> 來添加燈光節點。</p>
</li>
<li>
<p>會彈出一個對話框，讓你選擇燈光的類型，常見的燈光類型有：</p>
<ul>
<li>
<p><strong>DirectionalLight</strong>：模擬太陽等遠距離光源。</p>
</li>
<li>
<p><strong>PointLight</strong>：模擬燈泡等來自單一點的光源。</p>
</li>
<li>
<p><strong>SpotLight</strong>：模擬聚光燈等圓錐形光源。</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>設置燈光屬性</strong>：</p>
<ul>
<li>
<p>在 <strong>Scene Tree</strong> 中選擇剛剛添加的燈光節點。</p>
</li>
<li>
<p>在右側的 <strong>Properties</strong> 視窗中，你可以調整燈光的顏色、強度等屬性。</p>
</li>
<li>
<p>注意 <strong>cast shadows</strong>（投射陰影）選項，如果開啟，會影響模擬的效能，尤其是在有多個燈光和大場景中。</p>
</li>
</ul>
<p><strong>要點提醒</strong>：</p>
<ul>
<li>
<p><strong>DirectionalLight</strong> 是最常用的光源，適合模擬太陽光。</p>
</li>
<li>
<p>在較大的模擬中，建議限制燈光的數量，特別是使用 <strong>SpotLight</strong> 和 <strong>PointLight</strong> 時，因為它們較為耗費計算資源。</p>
</li>
</ul>
</li>
</ol>
<h4>步驟 3：修改牆壁外觀</h4>
<ol>
<li>
<p><strong>選擇牆壁</strong>：</p>
<ul>
<li>
<p>在 <strong>Scene Tree</strong> 中，找到 <strong>Shape</strong> 節點，這是代表牆壁的節點。如果是預設範例，牆壁應該已經存在。</p>
</li>
</ul>
</li>
<li>
<p><strong>添加外觀節點</strong>：</p>
<ul>
<li>
<p>在 <strong>Shape</strong> 節點下，右鍵點擊並選擇 <strong>Add / Appearance</strong> 或 <strong>Add / PBRAppearance</strong>。建議使用 <strong>PBRAppearance</strong>，它能提供更真實的渲染效果。</p>
</li>
<li>
<p>在 <strong>PBRAppearance</strong> 節點下，你會看到一些屬性可以設置，例如顏色（<strong>baseColor</strong>）和光滑度（<strong>roughness</strong>）。</p>
</li>
</ul>
</li>
<li>
<p><strong>設置外觀屬性</strong>：</p>
<ul>
<li>
<p>設定 <strong>baseColor</strong> 為藍色（點擊顏色選擇器並選擇藍色）。</p>
</li>
<li>
<p>設定 <strong>metalness</strong> 為 0（這會讓牆壁看起來不具金屬感）。</p>
</li>
<li>
<p>設定 <strong>roughness</strong> 為 0.5（這會讓牆壁看起來有一定的粗糙感）。</p>
</li>
</ul>
<p><strong>要點提醒</strong>：</p>
<ul>
<li>
<p>使用 <strong>PBRAppearance</strong> 節點可以獲得更真實的光照效果，這在渲染物體時非常重要。</p>
</li>
<li>
<p>設定顏色和材質屬性時要注意光滑度和金屬感的平衡，這將影響最終效果。</p>
</li>
</ul>
</li>
</ol>
<h4>步驟 4：為球體添加現有外觀</h4>
<ol>
<li>
<p><strong>選擇球體</strong>：</p>
<ul>
<li>
<p>在 <strong>Scene Tree</strong> 中，找到代表球體的節點，通常是 <strong>Shape</strong> 節點下的 <strong>Sphere</strong>。</p>
</li>
</ul>
</li>
<li>
<p><strong>刪除現有外觀</strong>：</p>
<ul>
<li>
<p>在 <strong>Appearance</strong> 欄位中，右鍵選擇 <strong>Delete</strong> 刪除當前的外觀節點。</p>
</li>
</ul>
</li>
<li>
<p><strong>選擇預設外觀</strong>：</p>
<ul>
<li>
<p>在 <strong>Appearance</strong> 欄位中再次點擊並選擇 <strong>PROTO nodes</strong> → <strong>Webots Projects</strong> → <strong>appearances</strong> → 選擇一個預設的外觀（例如 <strong>OldSteel</strong>）。</p>
</li>
</ul>
<p><strong>要點提醒</strong>：</p>
<ul>
<li>
<p>當選擇預設外觀時，請確保選擇的是 <strong>PBRAppearance</strong> 類型的外觀，它能提供更高質量的渲染效果。</p>
</li>
</ul>
</li>
</ol>
<h4>步驟 5：從磁碟上添加紋理</h4>
<ol>
<li>
<p><strong>下載紋理</strong>：</p>
<ul>
<li>
<p>下載你想用的紋理圖片，例如 <code inline="">red_brick_wall.jpg</code>，並保存到你的電腦上。</p>
</li>
</ul>
</li>
<li>
<p><strong>為球體添加紋理</strong>：</p>
<ul>
<li>
<p>在 <strong>Appearance</strong> 欄位中，刪除現有的節點並選擇 <strong>PBRAppearance</strong> 節點。</p>
</li>
<li>
<p>在 <strong>PBRAppearance</strong> 節點中，找到 <strong>baseColorMap</strong> 欄位，並在其中添加 <strong>ImageTexture</strong> 節點。</p>
</li>
</ul>
</li>
<li>
<p><strong>設置紋理</strong>：</p>
<ul>
<li>
<p>在 <strong>ImageTexture</strong> 節點中，點擊 <strong>url</strong> 欄位的 <strong>Add</strong> 按鈕，選擇你的紋理圖片。</p>
</li>
<li>
<p>確保圖片的路徑是正確的，可以使用相對路徑，指向你的 <code inline="">worlds</code> 目錄或其他對應的目錄。</p>
</li>
</ul>
</li>
<li>
<p><strong>檢視紋理效果</strong>：</p>
<ul>
<li>
<p>在 Webots 模擬窗口中，你可以看到紋理被映射到球體表面。</p>
</li>
</ul>
<p><strong>要點提醒</strong>：</p>
<ul>
<li>
<p>確保紋理的路徑設置正確，Webots 支援相對路徑的設定。</p>
</li>
<li>
<p>當紋理應用於動態物體時，能夠讓物體的運動更具真實感。</p>
</li>
</ul>
</li>
</ol>
<h4>步驟 6：設定渲染模式</h4>
<ol>
<li>
<p><strong>啟用線框模式</strong>：</p>
<ul>
<li>
<p>在 Webots 的視圖中，點擊 <strong>View</strong> 菜單。</p>
</li>
<li>
<p>選擇 <strong>Wireframe Rendering</strong>，此時所有物體將以線框模式顯示。</p>
</li>
</ul>
</li>
<li>
<p><strong>恢復正常模式</strong>：</p>
<ul>
<li>
<p>之後，選擇 <strong>View / Plain Rendering</strong> 恢復正常的渲染模式。</p>
</li>
</ul>
</li>
<li>
<p><strong>顯示其他視覺效果</strong>：</p>
<ul>
<li>
<p>你還可以選擇顯示其他視覺效果，例如坐標系統（<strong>View / Optional Rendering / Show Coordinates System</strong>）或距離傳感器光線（<strong>View / Optional Rendering / Show DistanceSensor Rays</strong>）。</p>
</li>
</ul>
<p><strong>要點提醒</strong>：</p>
<ul>
<li>
<p>渲染模式選項可以幫助你更好地理解物體的結構和行為，尤其在進行調試和測試時非常有用。</p>
</li>
</ul>
</li>
</ol>
<h4>步驟 7：保存並查看結果</h4>
<ol>
<li>
<p><strong>保存模擬場景</strong>：</p>
<ul>
<li>
<p>點擊 <strong>File / Save World</strong> 保存當前的場景設置。</p>
</li>
</ul>
</li>
<li>
<p><strong>檢視模擬</strong>：</p>
<ul>
<li>
<p>在 Webots 的視圖中查看最終效果，並根據需要進行調整。</p>
</li>
</ul>
</li>
</ol>
<hr/>
<h4>重點提醒：</h4>
<ol>
<li>
<p><strong>燈光設置</strong>：過多的光源會影響模擬效能，尤其是在複雜的場景中。建議簡化光源設置，並只使用必要的光源類型。</p>
</li>
<li>
<p><strong>外觀和紋理</strong>：使用 <strong>PBRAppearance</strong> 節點能提供更真實的材質效果，並且能支持更高質量的渲染效果，適合大多數物體。</p>
</li>
<li>
<p><strong>紋理的路徑</strong>：確保在添加紋理時，路徑設置正確，否則紋理可能無法正確顯示。</p>
</li>
</ol>
<p></p>
<h2>task6</h2>
<h4>Webots Tutorial 4 ~6 (HW3)</h4>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41023216</span></p>
<p><a href="/downloads/hw1.rar">hw1</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="480" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/sdz1FOfAAMA" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41023216" width="1265"></iframe></p>
<p>建立robot<br/>新增solid 兩個hingjoint<br/>命名為base joint1 joint4<br/>在children中新增shape並命名為base<br/>新增外觀去跟換顏色 我設定1，0.5，0.6<br/>在geomotry新增box 設定1，0.1，0.1<br/>在bounding新增use base<br/>joint1 pose位置設定為translation -0.5，0，0 rotation 0，0，1.57<br/>joint2 pose位置設定為translation 0.4，0，0.1 rotation 0，-1，0.9<br/>joint3 pose位置設定為translation 0.6，0，-0.1 rotation 0，-1，1.64<br/>joint1 shape位置設定為translation 0.2，0，0.1 box 0.4，0.1，0.1<br/>joint2 shape位置設定為translation 0.28，0，0.1 rotation 0.6，0.1，0.1<br/>joint3 shape位置設定為translation 0.48，0，0.1 rotation 0.9，0.1，0.1<br/>在jonit1、2、3中的children中新增shape並命名為link1、2、3_shape<br/>在joint1 的shape下新增hingjoint命名為joint2<br/>joint1、2、3分別開啟bounding 以及physics<br/>在joint4用solidreference 用link3<br/>在controller選擇程式 fourbar_controller1</p>
<p>在過程中有不斷的失誤造成自己不斷的重作，像自己忘記存檔，就按到重製，也有自己漏了步驟，找了很久，卻找不到問題，而重做，但也讓我自己可以對webots比較熟練。</p>
<p></p>
<h4 data-end="106" data-start="58">1. 在製作 HW1 之前是否實際練習 Tutorial1 與 Tutorial2？</h4>
<p data-end="144" data-start="107">是，這兩個教學能幫助使用者熟悉 Webots 的基本操作與控制器開發流程。</p>
<h4 data-end="178" data-start="146">2. Webots 是什麼樣的軟體？它主要用途為何？</h4>
<p data-end="218" data-start="179">Webots 是一套開源的機器人模擬軟體，主要用於機器人模擬、開發與教育訓練。</p>
<h4 data-end="264" data-start="220">3. 在 Tutorial1 中，學習者需要操作的主要機器人模型名稱是什麼？</h4>
<p data-end="276" data-start="265">e-puck 機器人。</p>
<h4 data-end="320" data-start="278">4. 如何在 Webots 中建立並執行一個新的模擬世界（world）？</h4>
<p data-end="363" data-start="321">點選 File &gt; New World 建立新世界，儲存後按 Run 即可開始模擬。</p>
<h4>5. 請說明如何讓機器人在模擬中移動，並指出相關的程式控制方式。</h4>
<p data-end="447" data-start="404">使用控制器設定馬達速度，例如使用 motor.setVelocity() 來移動輪子。</p>
<h4>6. Tutorial1 中，學習者需要修改哪些參數或檔案來控制機器人的行為？</h4>
<p data-end="528" data-start="495">需修改控制器程式中的感測器與馬達參數，通常為 Python 檔案。</p>
<h4>7. 請簡述 Webots 控制器的功能及其與機器人的關係。</h4>
<p data-end="598" data-start="567">控制器是用來控制機器人行為的程式，每個機器人可綁定一個控制器。</p>
<h4>8. 在 Tutorial2 中，機器人需要完成什麼樣的任務或行為？</h4>
<p data-end="654" data-start="641">主要任務為路徑追蹤與避障。</p>
<p><strong>9. Webots 中的 Supervisor 是什麼？與一般控制器有何不同？</strong></p>
<p data-end="743" data-start="702">Supervisor 是模擬的總控制器，可以控制整個場景與其他機器人的狀態或位置。</p>
<h4>10. 請說明如何在 Webots 中讀取感測器數據並應用。</h4>
<p data-end="835" data-start="782">使用感測器 API，如 distance_sensor.getValue() 來讀取資料，並用來控制行為。</p>
<h4>11. 若要延伸 Tutorial2 讓機器人具備避障能力，該如何設計與實作？</h4>
<p data-end="911" data-start="883">可使用距離感測器資料判斷障礙物位置，並調整輪子速度避開。</p>
<h4>12. 請說明 Webots 中時間步長（timestep）的意義與影響。</h4>
<p data-end="998" data-start="957">timestep 是模擬中每次更新的時間間隔，單位為毫秒，影響模擬的精度與穩定性。</p>
<h4>13. 如何在 Webots 中為機器人新增感測器？</h4>
<p data-end="1078" data-start="1033">在 .wbt 或 .proto 檔加入感測器元件，控制器中初始化並呼叫 enable()。</p>
<h4>14. 如何將 Webots 控制器程式從 Python 改為 C？</h4>
<p data-end="1157" data-start="1121">建立 C 控制器檔並設定控制器類型為 C，在機器人屬性中指向新的控制器。</p>
<h4>15. 若控制器程式有錯誤，Webots 會如何反應？</h4>
<p data-end="1226" data-start="1193">會在 Console 顯示錯誤訊息，需根據訊息排除錯誤並重新執行。</p>
<h4>16. 如何分享 Webots 的世界檔與設定？</h4>
<p data-end="1302" data-start="1259">將 .wbt、.proto 檔及 controllers 資料夾打包壓縮後傳送給他人。</p>
<h4>17. 若要讓機器人發出聲音或播放音樂，Webots 提供什麼方法？</h4>
<p data-end="1369" data-start="1345">可使用 Speaker 元件播放音效檔案或語音。</p>
<h4>18. 如何同時操作多個機器人並執行不同控制器？</h4>
<p data-end="1427" data-start="1402">在世界中加入多台機器人，分別設定不同的控制器名稱。</p>
<h4>19. 如何獲得機器人的座標與朝向？</h4>
<p data-end="1518" data-start="1454">使用 Supervisor API，例如 getSelf().getPosition() 或 getOrientation()。</p>
<h4>20. 感測器資料的單位為何？如何解讀？</h4>
<p data-end="1579" data-start="1547">距離感測器單位為公尺，加速度為 m/s²，需參考感測器規格轉換。</p>
<p><strong>21. 如何錄製模擬畫面並輸出成影片？</strong></p>
<p data-end="1649" data-start="1607">從功能表選擇 Movie &gt; Start recording，模擬後停止並匯出影片。</p>
<h4>22. Webots 中的 PROTO 有什麼作用？與 .wbt 檔有何關聯？</h4>
<p data-end="1732" data-start="1697">PROTO 定義機器人或元件的結構，可在 .wbt 世界中實例化使用。</p>
<h4>23. 如何設定機器人的初始位置與方向？</h4>
<p data-end="1801" data-start="1761">在場景中選取機器人，在屬性中設定 translation 與 rotation。</p>
<h4>24. 如何讓機器人執行自訂動作？</h4>
<p data-end="1854" data-start="1827">透過撰寫控制器程式自定義行為邏輯，執行特定移動或反應。</p>
<h4>25. Webots 支援哪些控制語言？各有何優缺點？</h4>
<p data-end="1948" data-start="1890">支援 Python、C、C++、Java、MATLAB。Python 易學，C 效能高，MATLAB 適合數據分析。</p>
<h4>26. 控制器如何與外部程式通訊？</h4>
<p data-end="2008" data-start="1974">可透過 socket、Web API、ROS 等進行資料交換或控制。</p>
<h4>27. 燈光與陰影對感測器數據有什麼影響？</h4>
<p data-end="2064" data-start="2038">會影響相機成像與紅外線感測效果，需適當調整光源配置。</p>
<h4>28. 如何調整物理參數如質量與摩擦係數？</h4>
<p data-end="2134" data-start="2094">在機器人元件的 Physics 屬性中設定 mass、friction 等參數。</p>
<h4>29. 如何使用 Console 與 Debug 工具協助排錯？</h4>
<p data-end="2210" data-start="2175">觀察 Console 訊息，搭配 print 訊息與斷點方式追蹤錯誤。</p>
<h4>30. 碰撞偵測機制如何運作？</h4>
<p data-end="2262" data-start="2234">可使用 bumper 或距離感測器檢測接觸或靠近障礙物。</p>
<h4>31. 如何導出模擬結果並進行數據分析？</h4>
<p data-end="2333" data-start="2291">控制器中將資料輸出成 CSV 檔，再使用 Excel 或 Python 等工具分析。</p>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41023216</span></p>
<p><span><a href="/downloads/hw2.rar">hw2</a></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="480" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ERF8OGKX-60" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41023216" width="1265"></iframe></p>
<p></p>
<p>在畫好的四連桿使用老師的給程式把它轉成obj檔<br/>建立robot<br/>新增兩個solid 兩個hingejoint<br/>命名為base1 base2 joint1 joint4<br/>再分別使用cadshape把檔案丟到裡面<br/>在base1 base2 中bounding使用mesh選擇對應的obj檔<br/>在joint1中的cadshape下面新增joint2 則joint3同理<br/>也分別在cadshape丟入對應的檔案<br/>joint1、2、3分別開啟bounding 以及physics<br/>在joint1中的device新增馬達joint_motor1<br/>在joint4用solidreference 用link3</p>
<p>在這次因為自己在未使用老師給的程式進行轉檔，使自己要自行調整位置，最後在運轉時，直接傘架，在不斷的嘗試下，也還是一直失敗，幸好後面去問老師後，才發現要用程式進行轉檔，自己就可以不用轉檔，跟自己標點，也可以正常運轉。</p>
<p></p>
<p></p>
<p><strong>Tutorial3 </strong><strong>相關提問</strong></p>
<ol>
<li><strong> Tutorial3 </strong><strong>的主要學習目標是什麼？</strong><br/> 學習如何使用地面感測器（<span>ground sensors</span>）偵測不同顏色，並根據顏色控制機器人行為。</li>
<li><strong> </strong><strong>在<span> Tutorial3 </span>中，如何讓機器人偵測地面顏色？</strong><br/> 透過安裝在底部的<span> ground sensors </span>感測地面反射的光強度，判斷顏色。</li>
<li><strong> Ground sensors </strong><strong>在<span> Webots </span>裡的作用為何？</strong><br/> 用來偵測地面顏色或材質差異，常用於巡線或區域辨識。</li>
<li><strong> </strong><strong>如何在程式中取得<span> ground sensor </span>的數值？</strong><br/> 使用 sensor.getValue() 方法來取得光強度數值。</li>
<li><strong> Tutorial3 </strong><strong>中的<span> e-puck </span>機器人如何根據地面顏色改變行為？</strong><br/> 例如偵測到黑線時停止或轉彎，白色地面則前進。</li>
<li><strong> </strong><strong>為什麼要對<span> ground sensor </span>的數值進行校正？</strong><br/> 不同照明或材質會影響感測數值，校正能提升準確性與穩定性。</li>
<li><strong> </strong><strong>如何設定<span> ground sensor </span>的<span> sampling period</span>？</strong><br/> 使用 sensor.enable(timestep) 來啟用並設定讀取週期。</li>
<li><strong> e-puck </strong><strong>機器人可以偵測哪些顏色？如何判斷？</strong><br/> 通常能偵測白色、灰色與黑色，依據反射值區間進行分類。</li>
<li><strong> Tutorial3 </strong><strong>如何讓<span> e-puck </span>在遇到黑線時做出反應？</strong><br/> 程式中偵測地面反射值降低，觸發控制邏輯使其轉向或停止。</li>
<li><strong> </strong><strong>若地面顏色偵測判斷有誤，可能原因有哪些？</strong><br/> 可能因光線不穩、地板材質不同、感測器位置偏差或程式判斷邏輯錯誤。</li>
</ol>
<p><strong>Tutorial4 </strong><strong>相關提問</strong></p>
<ol>
<li><strong> Tutorial4 </strong><strong>的核心任務是什麼？</strong><br/> 學習如何使用距離感測器實現機器人的避障行為。</li>
<li><strong> </strong><strong>如何讓機器人偵測牆壁或障礙物？</strong><br/> 透過<span> e-puck </span>上的多組距離感測器檢測前方或側邊物體。</li>
<li><strong> Webots </strong><strong>的距離感測器（<span>DistanceSensor</span>）如何運作？</strong><br/> 利用紅外線發射與接收原理來偵測前方物體距離。</li>
<li><strong> </strong><strong>如何在程式中啟用並讀取<span> DistanceSensor </span>的數值？</strong><br/> 使用 sensor.enable(timestep) 啟用，再用 sensor.getValue() 讀取資料。</li>
<li><strong> Tutorial4 </strong><strong>中，<span>e-puck </span>機器人如何實作避障行為？</strong><br/> 根據左右感測器數值調整馬達速度，進行閃避或轉向。</li>
<li><strong> </strong><strong>距離感測器數值的單位是什麼？如何轉換？</strong><br/> 回傳的是比例值（如<span> 0~1000</span>），可根據實際距離進行線性轉換或比對校正資料。</li>
<li><strong> </strong><strong>如何設定距離感測器的<span> sampling period</span>？</strong><br/> 與其他感測器相同，使用 sensor.enable(timestep)。</li>
<li><strong> </strong><strong>當機器人同時偵測到左右兩側有障礙物時，應如何設計行為？</strong><br/> 可讓機器人後退或選擇一側較遠的方向進行轉向。</li>
<li><strong> </strong><strong>為什麼避障時要考慮多個感測器的數值？</strong><br/> 可以更準確地判斷障礙物方位與距離，提高避障靈敏度與穩定性。</li>
<li><strong> Tutorial4 </strong><strong>若機器人無法正確避障，可能的解決方法有哪些？</strong><br/> 檢查感測器是否啟用、感測器位置設定是否正確、邏輯判斷條件是否合理。</li>
</ol>
<p><strong>Tutorial5 </strong><strong>相關提問</strong></p>
<ol>
<li><strong> Tutorial5 </strong><strong>的主要內容主題為何？</strong><br/> 學習多感測器整合與任務流程設計，例如巡線與避障結合。</li>
<li><strong> </strong><strong>如何讓機器人依照不同地面顏色或障礙物狀態做出不同反應？</strong><br/> 結合<span> ground sensor </span>和<span> distance sensor </span>的輸入條件來觸發對應行為。</li>
<li><strong> Tutorial5 </strong><strong>中如何結合多種感測器進行複雜任務？</strong><br/> 使用邏輯條件整合感測資料，在控制器中設計決策規則。</li>
<li><strong> </strong><strong>如何設計機器人巡線並同時避障？</strong><br/> 先以<span> ground sensor </span>控制行進方向，當距離感測器偵測到障礙物時改變優先行為。</li>
<li><strong> </strong><strong>若多種感測器回報衝突訊息，程式該如何決策？</strong><br/> 設計優先順序或使用有限狀態機來管理各種感測情境。</li>
<li><strong> </strong><strong>在<span> Tutorial5 </span>裡，機器人如何完成任務流程的狀態切換？</strong><br/> 透過變數紀錄當前狀態，根據感測器輸入進行狀態轉換。</li>
<li><strong> </strong><strong>如何在程式中設計有限狀態機（<span>FSM</span>）？</strong><br/> 定義各狀態與對應行為，在主迴圈中根據感測輸入條件切換狀態。</li>
<li><strong> Tutorial5 </strong><strong>的挑戰題目有哪些？如何著手解決？</strong><br/> 可能包括巡線<span>+</span>避障<span>+</span>目標到達，可逐步開發感測、控制、決策模組並進行整合。</li>
<li><strong> </strong><strong>若要讓機器人自主完成一個完整路徑的巡邏任務，應加入哪些功能？</strong><br/> 需要巡線、定位、轉向控制、任務狀態管理與障礙處理機制。</li>
<li><strong> </strong><strong>綜合<span> Tutorial3~5</span>，請說明感測器資料融合（<span>sensor fusion</span>）的意義與應用。</strong><br/> 感測器資料融合是將不同來源的感測資訊整合以提升判斷準確性，應用於任務決策、路徑規劃與自主導航中。</li>
</ol>
<p><span> </span></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 41023216</span></p>
<p><a href="/downloads/hw3.rar">hw3</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="480" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/_hQx6rWENAc" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 41023216" width="1265"></iframe></p>
<p></p>
<p>把畫好的圖丟到程式中進行轉檔<br/>並到blender分別對他們進行顏色上的跟換<br/>再新增robot<br/>建立兩個solid 兩個hingejoint<br/>分別命名為 base joint1 joint4 stand<br/>在base中children新增cadshape丟入base檔案<br/>bounding選擇mesh丟入其對應檔案<br/>在joint1接頭參數設定 軸 0，0，1 錨點-0.3，0.22，0<br/>在device設定馬達命名為motor1<br/>最大加速度為1e+05 最大扭力1e+05<br/>新增solid命名為press<br/>在press中children新增cadshape丟入press檔案<br/>在其下面新增hingejoint命名為joint2</p>
<p>在joint2接頭參數設定 軸 0，0，1 錨點-0.0224，0.148，0<br/>新增solid命名為connector<br/>在connector中children新增cadshape丟入connector檔案<br/>在其下面新增hingejoint命名為joint3</p>
<p>在joint3接頭參數設定 軸 0，0，1 錨點-0.0686，0.707，0<br/>新增solid命名為shooter<br/>在shooter中children新增cadshape丟入shooter檔案</p>
<p>在joint4接頭參數設定 軸 0，0，1 錨點0.15，0.68，0<br/>在joint4用solidreference 用shooter</p>
<p>在joint(1、2、3)bounding選擇mesh丟入其對應檔案以及打開physics</p>
<p>在stand接頭參數設定 旋轉0，0，1，-1.57<br/>在contactmaterial命名metal<br/>在stand中children新增pose<br/>其軸 -1.13，2.8，-0.3 旋轉0，1，0，-1.57<br/>在pose中children新增cadshape丟入basket_stand檔案basket_stand<br/>bounding選擇pose 軸 -1.13，2.8，-0.3 旋轉0，1，0，-1.57<br/>在bounding中children新增mesh丟入其對應檔案</p>
<p>在pose下面新增distance sensor命名為sensor<br/>其軸 -1.13，2.8，-0.3 旋轉0，1，0，-1.57<br/>在其裡面的children新增solid命名為sensor<br/>旋轉1，0，0，0<br/>新增solid命名為ball<br/>更改其顏色 在geomotry新增cylinder 設定高0.4半徑0.02</p>
<p>新增solid命名為ball<br/>在contactmaterial命名ball<br/>更改其顏色 在geomotry新增sphere 設定半徑0.1<br/>開啟bounding 以及physics</p>
<p>新增solid命名為floor<br/>其軸 0，-0.1，0 旋轉1，0，0，-1.57<br/>在contactmaterial命名metal<br/>在base中children新增cadshape丟入floor檔案<br/>bounding選擇mesh丟入其對應檔案</p>
<p>在controller選擇程式 sensor</p>
<p></p>
<p>在做這次的投籃機，跟之前的相比，有比較大的難度，在看過老師的範例，跟著老師做出的步驟一步一步地完成，這次也沒有遇到像上次的問題，一直做不出來。</p>
<p></p>
<p><strong>Tutorial6 </strong><strong>相關提問</strong></p>
<ol>
<li><strong> Tutorial6 </strong><strong>的主要學習主題是什麼？</strong><br/> 學習如何使用攝影機感測器並透過影像資料控制機器人行為。</li>
<li><strong> </strong><strong>在<span> Tutorial6 </span>中，<span>e-puck </span>機器人新增了哪些裝置？</strong><br/> 新增了攝影機（<span>Camera</span>）裝置。</li>
<li><strong> </strong><strong>如何在<span> Webots </span>中使用攝影機（<span>Camera</span>）？</strong><br/> 將<span> Camera </span>裝置加入機器人並在程式中初始化與啟用。</li>
<li><strong> Camera </strong><strong>需要在程式中如何啟用？</strong><br/> 使用<span> camera.enable(timestep) </span>指令開啟攝影機功能。</li>
<li><strong> </strong><strong>如何取得攝影機擷取到的影像資料？</strong><br/> 使用<span> camera.getImage() </span>取得目前影像，搭配影像處理工具進行分析。</li>
<li><strong> Tutorial6 </strong><strong>中，機器人如何依據攝影機影像做出反應？</strong><br/> 分析畫面中顏色或物體位置來改變前進方向或執行特定動作。</li>
<li><strong> Camera </strong><strong>裝置可以調整哪些參數？</strong><br/> 可調整影像解析度、視角、色彩格式等。</li>
<li><strong> </strong><strong>影像解析度的設定會對模擬有什麼影響？</strong><br/> 解析度越高，處理負載越大，模擬速度會變慢但影像更清晰。</li>
<li><strong> </strong><strong>如何將攝影機影像儲存成圖片檔？</strong><br/> 使用<span> Webots </span>提供的<span> image saving API</span>，如<span> camera.saveImage()</span>。</li>
<li><strong> </strong><strong>若攝影機影像顯示異常，可能的原因有哪些？</strong><br/> 可能未啟用攝影機、解析度錯誤、影像讀取格式錯誤或無視野畫面。</li>
</ol>
<p><strong>Tutorial7 </strong><strong>相關提問</strong></p>
<ol>
<li><strong> Tutorial7 </strong><strong>的核心任務是什麼？</strong><br/> 學習使用攝影機辨識顏色並控制機器人追蹤指定顏色物體。</li>
<li><strong> </strong><strong>在本範例中<span> e-puck </span>機器人如何偵測顏色？</strong><br/> 從攝影機擷取畫面，分析像素的顏色值來判斷目標。</li>
<li><strong> </strong><strong>如何分析攝影機擷取的影像來辨識特定顏色？</strong><br/> 將影像轉換為像素陣列，分析特定顏色範圍內的像素比例與位置。</li>
<li><strong> OpenCV </strong><strong>或其他影像處理函式庫在<span> Webots </span>控制器程式中的應用方式？</strong><br/> 在控制器中導入<span> OpenCV </span>函式庫，用來進行色彩篩選、形狀辨識或區域追蹤。</li>
<li><strong> </strong><strong>如何將影像中的顏色資訊轉換為機器人行為？</strong><br/> 根據顏色位置控制機器人方向，例如顏色在左側則左轉，中央則前進。</li>
<li><strong> </strong><strong>若要辨識多種顏色，程式需考慮哪些步驟？</strong><br/> 定義每種顏色的<span> HSV </span>或<span> RGB </span>範圍，分別比對後制定對應反應。</li>
<li><strong> </strong><strong>如何解決不同光源下顏色偵測的不穩定問題？</strong><br/> 可進行影像白平衡處理、轉換至<span> HSV </span>色彩空間、或加入動態校正邏輯。</li>
<li><strong> e-puck </strong><strong>機器人如何追蹤影像中的顏色物件？</strong><br/> 偵測顏色物件在畫面中的位置，控制左右輪速度使其對準目標。</li>
<li><strong> </strong><strong>若影像中有多個同色物件，程式如何選擇追蹤目標？</strong><br/> 可選擇最大面積、最近距離或最中央的物件作為追蹤目標。</li>
<li><strong> Tutorial7 </strong><strong>能否應用於現實世界的機器人？需做哪些調整？</strong><br/> 可應用，但需考慮真實攝影機雜訊、光線變化與處理效能等問題。</li>
</ol>
<p><strong>Tutorial8 </strong><strong>相關提問</strong></p>
<ol>
<li><strong> Tutorial8 </strong><strong>的主要學習目標是什麼？</strong><br/> 學習如何使用<span> Supervisor </span>控制整個模擬環境與監控機器人狀態。</li>
<li><strong> </strong><strong>什麼是<span> Supervisor</span>？在<span> Tutorial8 </span>扮演什麼角色？</strong><br/> Supervisor 是一個特殊控制器，用來操控整個模擬環境與監控所有物件。</li>
<li><strong> Supervisor </strong><strong>可以進行哪些操作？</strong><br/> 可讀取與修改機器人位置、重設模擬、建立記錄、控制場景物件等。</li>
<li><strong> </strong><strong>如何在<span> Supervisor </span>控制器中存取並控制其他機器人？</strong><br/> 使用<span> supervisor.getFromDef() </span>取得機器人節點，再用<span> getField() </span>控制其屬性。</li>
<li><strong> </strong><strong>如何用<span> Supervisor </span>監測機器人是否達到目標區域？</strong><br/> 透過讀取機器人座標與目標位置比對是否進入指定範圍。</li>
<li><strong> Supervisor </strong><strong>如何重設模擬或重置機器人位置？</strong><br/> 使用<span> reset() </span>或設定<span> translation</span>、<span>rotation </span>欄位回復初始狀態。</li>
<li><strong> Supervisor </strong><strong>能否獲取所有物件的座標與狀態？如何實作？</strong><br/> 可以，透過迴圈抓取所有節點的<span> translation </span>與其他欄位資訊。</li>
<li><strong> </strong><strong>如何紀錄機器人模擬過程的數據供日後分析？</strong><br/> 使用<span> Supervisor </span>寫入資料至檔案，如<span> CSV</span>，記錄時間、位置與狀態資訊。</li>
<li><strong> Supervisor </strong><strong>可以如何協助自動化測試機器人行為？</strong><br/> 可重複執行模擬、批次測試不同場景、記錄結果並自動分析。</li>
<li><strong> </strong><strong>綜合<span> Tutorial6~8</span>，請說明感知（感測）、決策（控制器）、監督（<span>Supervisor</span>）三者如何協同運作。</strong><br/> 感測器收集環境資訊，控制器依據資料決策執行動作，<span>Supervisor </span>則負責監控全域狀態並控制模擬流程，三者互補構成完整的智慧機器人系統。</li>
</ol>
<p><span> </span></p>
<h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>w1使用github設置key跟建立倉儲</p>
<p>w2新增token 新增各組員網站及倉儲 自行建立可攜並錄製影片</p>
<p>w3建立ssh以及在更新list ipv6</p>
<p>w4 完成ipv6的</p>
<p>w5 使用webots內做出四連桿</p>
<p>w6 自己畫出四連桿並用webots來運轉</p>
<p>w7投籃機練習</p>
<p>w8做出hw1到hw2作業</p>
<p>w9 拍攝及剪輯hw1到hw2作業片</p>
<p>w10 填hw1、2的表單</p>
<p>w11完成hw3並拍攝剪輯影片</p>
<p>w12更新作業表單</p>
<p>w13完成exam1、2並拍攝剪輯 填寫表單</p>
<p>w14完成exam3<span>並拍攝剪輯 更新表單</span></p>
<p>w15上傳各項完整檔案</p>
<p>w16回答問題 做final</p>
<p>w17做final及報告</p>
<p>各週網頁內容:</p>
<p>期中心得:</p>
<p>這次上課每次準時到班上課，無任何缺席，老師要求的都有在努力在跟上</p>
<p>期中自評影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/uGqWorziQ2c" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 41023216" width="653"></iframe></p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41023216</span></p>
<p><a href="/downloads/exam1.rar">exam1</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/pIkh02xkoeQ" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41023216" width="633"></iframe></p>
<p>加入Robot<br/>新增solid hingjoint<br/>命名為base joint1 <br/>在base建立1,0.1,0.1的方塊<br/>在材質中的transparency設為1 使base變成透明<br/>joint1建立0.4,0.1,0.1的方塊<br/>joint1，調整axis(0,0,1),anchor(-0.5,0,0)<br/>調整位置(-0.5,0,0)與角度(0,0,1,0.0279)學號後兩碼為16<br/>新增馬達命名為 motor<br/>在joint1加入新的Hingejoint命名為joint2<br/>joint2建立0.6,0.1,0.1的方塊<br/>還要再建一個0.3,0.1,0.1的方塊<br/>調整位置(0.4,0,0.1)與角度(0,0,1,1.21)<br/>joint2，調整axis(0,0,1),anchor(0.4,0,0)<br/>在joint2加入新的Hingejoint命名為joint3<br/>joint3建立0.9,0.1,0.1的方塊<br/>調整位置(0.6,0,-0.1)與角度(0,0,-1,2.39)<br/>joint3，調整axis(0,0,1),anchor(0.6,0,0)<br/>在link3_shape加入新的Hingejoint命名為joint4<br/>新增SolidReference<br/>joint4調整axis(0,0,1),anchor(0.9,0,0)<br/>joint1、2、3分別開啟bounding 以及physics<br/>加入controller</p>
<p>在這次的測驗中，沒有遇到太多的問題，因為大部分的問題都已經在作業1的時候，就已經解決了。</p>
<p></p>
<h4><span>Exam1 相關提問:</span></h4>
<h4>1. 製作此場景時，WorldInfo 節點有何作用</h4>
<p data-end="124" data-start="96">設定模擬的基本資訊，例如模擬時間步長、重力、背景顏色等。</p>
<h4>2. Viewpoint 節點的主要功能是什麼</h4>
<p data-end="175" data-start="156">定義使用者進入模擬時的視角與觀看方向。</p>
<h4>3. TexturedBackground 與 TexturedBackgroundLight 在場景中負責什麼</h4>
<p data-end="305" data-start="240"><span>TexturedBackground </span>設定天空與地面貼圖，<span>TexturedBackgroundLight </span>設定全域照明方向與顏色。</p>
<h4 data-end="335" data-start="307">4. Robot 節點在此場景中代表什麼角色</h4>
<p data-end="367" data-start="336">代表可控制的機器人主體，包含其組件、感測器、致動器與控制程式。</p>
<h4 data-end="396" data-start="369">5. base Solid 節點的功能為何</h4>
<p data-end="426" data-start="397">提供機構的固定基座，常為靜態且不可動的部分，支持其他結構。</p>
<h4 data-end="468" data-start="428">6. Shape 與 Appearance 節點如何用於物件外觀設定</h4>
<p data-end="515" data-start="469"><span>Shape </span>定義物件的幾何形狀，<span>Appearance </span>用於設定材質、顏色與透明度等視覺效果。</p>
<h4 data-end="550" data-start="517">7. HingeJoint 節點的用途與基本參數有哪些</h4>
<p data-end="608" data-start="551">建立單軸旋轉關節，常用參數有<span> axis </span>表示旋轉軸、<span>anchor </span>表示旋轉中心、<span>endPoint </span>表示連接的物件。</p>
<h4 data-end="665" data-start="610">8. HingeJointParameters 節點中的 axis 與 anchor 分別代表什麼</h4>
<p data-end="702" data-start="666"><span>axis </span>是旋轉軸方向向量，<span>anchor </span>是旋轉中心點在世界座標的位置。</p>
<h4 data-end="748" data-start="704">9. RotationalMotor 裝置如何與 HingeJoint 結合</h4>
<p data-end="796" data-start="749">作為<span> HingeJoint </span>的子裝置，透過<span> jointName </span>或階層位置自動控制該旋轉關節。</p>
<h4 data-end="838" data-start="798">10. Solid 節點與 boundingObject 的關係為何</h4>
<p data-end="887" data-start="839"><span>boundingObject </span>是<span> Solid </span>的碰撞邊界模型，模擬中物理計算與碰撞偵測依此進行。</p>
<h4 data-end="925" data-start="889">11. link1 link2 link3 各自代表什麼結構</h4>
<p data-end="958" data-start="926">它們分別是四連桿機構中的第一至第三個連桿，連接成完整的運動結構。</p>
<h4 data-end="985" data-start="960">12. Pose 節點的功能與使用時機</h4>
<p data-end="1016" data-start="986">用來在群組物件中施加局部平移與旋轉，適合精細調整子元件位置。</p>
<h4 data-end="1049" data-start="1018">13. geometry Box 如何設定形狀尺寸</h4>
<p data-end="1092" data-start="1050">使用<span> size </span>屬性設定為長寬高三個值，例如<span> size 0.1 0.02 0.02</span>。</p>
<h4 data-end="1144" data-start="1094">14. material Material 內的 diffuseColor 如何影響外觀</h4>
<p data-end="1161" data-start="1145">設定物體在光照下的基礎顯示顏色。</p>
<h4 data-end="1197" data-start="1163">15. transparency 參數設定對外觀有何影響</h4>
<p data-end="1221" data-start="1198">設定透明度，<span>0 </span>表示不透明，<span>1 </span>表示完全透明。</p>
<h4 data-end="1263" data-start="1223">16. endPoint 屬性在 HingeJoint 結構中的意義</h4>
<p data-end="1291" data-start="1264">指定旋轉關節所連接的下一個物件，作為旋轉作用的目標物。</p>
<h4 data-end="1327" data-start="1293">17. Robot 節點中 children 陣列的作用</h4>
<p data-end="1355" data-start="1328">列出機器人所有子元件，包括外殼、感測器、關節、馬達等。</p>
<h4 data-end="1388" data-start="1357">18. physics Physics 節點的功能</h4>
<p data-end="1421" data-start="1389">設定物件的質量、摩擦係數、彈性係數等參數，影響模擬時的動態反應。</p>
<h4 data-end="1460" data-start="1423">19. SolidReference 如何實現多關節結構的連結</h4>
<p data-end="1497" data-start="1461">可以重複使用已定義的<span> Solid </span>元件來連接各連桿，實現複雜的關節結構。</p>
<h4 data-end="1533" data-start="1499">20. controller 屬性如何指定機器人控制程式</h4>
<p data-end="1558" data-start="1534">設定控制器名稱，系統將自動執行該名稱對應的程式。</p>
<h4 data-end="1586" data-start="1560">21. DEF 與 USE 的差異與用途</h4>
<p data-end="1620" data-start="1587"><span>DEF </span>是定義具名物件，<span>USE </span>用來重複使用該物件，避免冗長複製。</p>
<h4 data-end="1674" data-start="1622">22. translation 與 rotation 如何決定物件在 3D 空間的位置與朝向</h4>
<p data-end="1713" data-start="1675"><span>translation </span>控制平移位置，<span>rotation </span>控制旋轉方向與角度。</p>
<h4 data-end="1748" data-start="1715">23. 何謂 boundingObject 為何要指定</h4>
<p data-end="1779" data-start="1749">用於物理碰撞與模擬，是<span> Solid </span>物件的不可或缺物理形狀。</p>
<h4 data-end="1820" data-start="1781">24. 為什麼 link2 會包含 Pose 及多個子 Shape</h4>
<p data-end="1858" data-start="1821"><span>Pose </span>讓內部物件具備相對位移，子<span> Shape </span>提供多種結構與外觀組合。</p>
<h4 data-end="1890" data-start="1860">25. anchor 參數如何影響關節的運動中心</h4>
<p data-end="1921" data-start="1891"><span>anchor </span>設定關節的旋轉中心，會影響關節的實際運動軌跡。</p>
<h4 data-end="1949" data-start="1923">26. 四連桿結構在此場景的設計意圖為何</h4>
<p data-end="1977" data-start="1950">用於模擬穩定可控的傳動系統，適合投擲機或仿生運動應用。</p>
<h4 data-end="2010" data-start="1979">27. 如何在 Webots 檢查各關節的運動範圍</h4>
<p data-end="2065" data-start="2011">可觀察<span> motor.getPosition() </span>數值，或設定<span> jointParameters </span>中的限制參數。</p>
<h4 data-end="2098" data-start="2067">28. 若要讓 link3 可動，需在何處設定馬達</h4>
<p data-end="2146" data-start="2099">在連接到<span> link3 </span>的<span> HingeJoint </span>中新增<span> RotationalMotor </span>裝置。</p>
<h4 data-end="2175" data-start="2148">29. 場景中透明的 base 有什麼作用</h4>
<p data-end="2209" data-start="2176">作為支撐參考物或對齊座標的基礎結構，但不希望被視覺干擾而設為透明。</p>
<h4 data-end="2242" data-start="2211">30. 製作此場景時，應注意哪些結構層級與命名規則</h4>
<p data-end="2275" data-start="2243">結構需清楚階層嵌套，命名應具描述性與一致性，便於維護與程式控制</p>
<p> </p>
<p> </p><h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41023216</span></p>
<p><a href="/downloads/exam2.rar">exam2</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/GML9QcZzuE8" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41023216" width="718"></iframe>在畫好的四連桿使用老師的給程式把它轉成obj檔<br/>建立robot<br/>新增兩個solid 兩個hingejoint<br/>命名為base1 base2 joint1 joint4<br/>再分別使用cadshape把檔案丟到裡面<br/>在base1 base2 中bounding使用mesh選擇對應的obj檔<br/>在joint1中的cadshape下面新增joint2 則joint3同理<br/>也分別在cadshape丟入對應的檔案<br/>joint1、2、3分別開啟bounding 以及physics<br/>在joint1中的device新增馬達joint_motor1<br/>在joint4用solidreference 用link3</p>
<p>這次測驗，在我已經有做過hw2的前提下，自己完成的比之前還要快，希望自己可以越來越順手，不要再因為一些細節，造成自己時間上的浪費。</p>
<p></p>
<p><strong>Exam2 相關提問:</strong></p>
<p><strong>1. WorldInfo 節點的作用為何？</strong><br/>定義場景全局環境參數，如重力大小與方向、時間步長，影響整體模擬行為。</p>
<p><strong>2. Viewpoint 節點設計時需考慮哪些參數？</strong><br/>主要有 position（觀察點位置）、orientation（觀察方向）、fieldOfView（視野角度）、near/far（裁剪平面距離），決定觀察視角與範圍。</p>
<p><strong>3. TexturedBackground 與 TexturedBackgroundLight 在場景中的功能？</strong><br/>TexturedBackground：負責背景貼圖，增強視覺真實感。</p>
<p>TexturedBackgroundLight：控制背景光影，使光線效果更自然。</p>
<p><strong>4. 為什麼需要使用 EXTERNPROTO 來引用背景相關的 PROTO？</strong><br/>可重用外部定義的複雜背景模型，減少場景檔案大小與重複編寫。</p>
<p><strong>5. 場景中為何有兩個 BASE（BASE 與 BASE2）？</strong><br/>代表不同基座或參考點，用於多層結構定位。</p>
<p><strong>6. CadShape 節點如何使用，其作用與限制為何？</strong><br/>導入外部 CAD 模型（如 obj 檔），增加細節真實度；限制為計算負擔大、碰撞設定複雜。</p>
<p><strong>7. Mesh 作為 boundingObject 有什麼效果？</strong><br/>提供精確碰撞範圍，但較耗效能。</p>
<p><strong>8. 資料夾路徑 "../split_parts/" 的用途為何？</strong><br/>存放拆分後的零件檔案，方便模組化管理。</p>
<p><strong>9. Robot 節點的結構和功能？</strong><br/>機器人根節點，包含連桿、關節、感測器、控制器等。</p>
<p><strong>10. HingeJoint 節點在本結構中如何應用？</strong><br/>定義旋轉關節，限制連桿旋轉軸與角度範圍。</p>
<p><strong>11. HingeJointParameters 的 axis 與 anchor 參數說明？</strong><br/>axis：旋轉軸方向。</p>
<p>anchor：旋轉中心位置。</p>
<p><strong>12. RotationalMotor 的功能是什麼，如何與關節對應？</strong><br/>驅動關節旋轉，控制轉速與力矩。</p>
<p><strong>13. SolidReference 的用途與設計意義？</strong><br/>重複使用已定義 Solid，避免重複定義，提升維護性。</p>
<p><strong>14. 為什麼每個連桿（link）都需要 physics 與 boundingObject？</strong><br/>physics 使其能參與物理模擬，boundingObject 定義碰撞區域。</p>
<p><strong>15. name 屬性在 Solid 與 Robot 節點中的差異？</strong><br/>Solid：零件名稱。</p>
<p>Robot：整體機器人名稱。</p>
<p><strong>16. JOINT1~JOINT4 分別對應機構的哪個部位？</strong><br/>視機構設計而定，對應各旋轉關節。</p>
<p><strong>17. anchor 參數對機構運動的實際影響？</strong><br/>決定關節旋轉中心，影響連桿運動軌跡。</p>
<p><strong>18. DEF 與 USE 的差異與用途？</strong><br/>DEF：定義節點名稱。</p>
<p>USE：重複引用該節點。</p>
<p><strong>19. 場景中 LINK1、LINK2、LINK3 的結構意義？</strong><br/>代表機械手臂或機構不同層級的連桿。</p>
<p><strong>20. 為何要將外部 CAD 檔案（obj）導入 Webots？</strong><br/>提升模型細節與真實感。</p>
<p><strong>21. 如何在 Webots 中檢查導入 CAD 物件的碰撞情形？</strong><br/>利用 boundingObject 與 physics 參數，並模擬觀察碰撞反應。</p>
<p><strong>22. controller 屬性如何讓機器人執行指定程式？</strong><br/>設定 Robot 節點 controller 屬性，指定外部控制程式。</p>
<p><strong>23. 如果要更改關節旋轉範圍，該修改哪些參數？</strong><br/>修改 HingeJointParameters 中的 minStop 和 maxStop。</p>
<p>24. 如何確保多個 link 結構組裝時不產生重疊？<br/>正確設定 anchor 與位置，並用碰撞檢測輔助。</p>
<p><strong>25. 若要讓 LINK3 可由 JOINT3 控制，需注意哪些設定？</strong><br/>確保 LINK3 是 JOINT3 的 childSolid，且軸向與 anchor 設定正確。</p>
<p>26. 機構結構層級在 VRML/WBT 檔案中的重要性？<br/>影響運動傳遞及相對位置，結構正確才能模擬真實機械。</p>
<p><strong>27. 若 CAD 檔案位置錯誤或缺失，Webots 會怎麼處理？</strong><br/>會報錯並無法載入該零件。</p>
<p><strong>28. 如何於場景內為各零件添加材質或調整外觀？</strong><br/>透過 Shape 與 Appearance 節點設定。</p>
<p><strong>29. Viewpoint 的 orientation 和 position 如何影響觀察？</strong><br/>position 決定攝影機位置，orientation 決定攝影機朝向。</p>
<p><strong>30. 製作此一場景時，需注意哪些命名與結構規範？</strong><br/>命名須唯一且具意義，結構層級清晰，關節配置合理。</p><h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-1 - 41023216</span></p>
<p><a href="/downloads/exam3.rar" title="exam3">exam3</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="560" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/M7nO8SSvu28" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-1 - 41023216" width="315"></iframe></p>
<p>使用hw1的檔案，改成ipv6，<a href="http://[2001:288:6004:17:fff1:cd25:0000:b008]:1234/index.html，再">http://[2001:288:6004:17:fff1:cd25:0000:b008]:1234/index.html</a>，再分別開啟其他人的網站</p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-2 - 41023216</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/WHqBNx6yXA4" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-2 - 41023216" width="639"></iframe></p>
<p><span>開啟檔案，把程式改成自己的後三碼後，再來更第一題一樣</span></p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-3</span><span> - 41023216</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="240" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/0tqSPh0JUnk" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-3 - 41023216" width="960"></iframe></p>
<p><span>執行webots --stream</span></p>
<p><span><a href="http://[2001:288:6004:17:fff1:cd25:0000:b006]:1234/index.html網站先開始模擬">http://[2001:288:6004:17:fff1:cd25:0000:b006]:1234/index.html網站先開始模擬</a></span></p>
<p><span>先執行指令pip install websocket-client websocket-server keyboard</span></p>
<p><span>組員執行python youbot_cart_client.py</span></p>
<p><span>組長執行python youbot_cart_server.py</span></p>
<p><span></span></p>
<p><span></span>這次要用遠端的方式進行操作觀看別人的畫面，一開始自己完全打不開監控模式，後面發現要在後面還要加上index.html，才夠進入，後面也沒有遇到比較特別的問題了。</p>
<p></p>
<p><strong>Exam3 相關提問:</strong></p>
<p><strong>1. 如何利用 webotsw --stream 啟動 Webots 模擬系統？</strong><br/>使用指令 webotsw --stream 於終端機啟動 Webots 並啟用串流服務，預設會啟用 WebSocket 伺服器供遠端瀏覽器連線。</p>
<p><strong>2. 為何要使用個人 IPv6 網址來啟動 Webots 伺服器？</strong><br/>IPv6 地址全球唯一且支援大量節點，有助於協同模擬跨網段直接連線，且避免 NAT 穿透問題。</p>
<p><strong>3. 客戶端如何透過瀏覽器檢視啟動串流的 Webots 模擬？</strong><br/>在瀏覽器輸入伺服器 IPv6 地址與指定 port，例如 https://[IPv6地址]:port，並使用相容 WebSocket 的前端頁面觀看串流畫面。</p>
<p><strong>4. 若要讓協同組員能觀看你的模擬，需注意哪些網路設定？</strong><br/>確保防火牆開放串流 port、IPv6 可連通、伺服器設定正確、使用 HTTPS 並配置憑證避免瀏覽器阻擋。</p>
<p><strong>5. 七段顯示器（三位數 counter）場景是如何設計其顯示結構的？</strong><br/>由三個三位數七段顯示器組合，分別控制各段顯示，使用 Mesh 代表每個 segment 形狀，搭配控制器動態切換亮滅。</p>
<p><strong>6. 如何將學號（八位數）分割顯示在多個三位數七段顯示器上？</strong><br/>將八位數切分為三組（3+3+2），每組送至對應三位數七段顯示器，最後一組可用空白或 0 補齊三位。</p>
<p><strong>7. Webots 場景檔案中 EXTERNPROTO 的作用是什麼？</strong><br/>引用外部 PROTO 定義，便於重用複雜元件，減少場景文件大小並維持結構清晰。</p>
<p><strong>8. RectangleArena 在場景中扮演什麼角色？</strong><br/>定義模擬環境的平面區域，作為移動範圍與碰撞邊界。</p>
<p><strong>9. DEF 與 USE 在 Webots 場景設計中的用途？</strong><br/>DEF 定義節點名稱，USE 重複引用已定義節點，節省資源並維持結構一致。</p>
<p><strong>10. Mesh 幾何如何用於七段顯示器的設計？</strong><br/>用 Mesh 定義每個 segment 的形狀，配合 Appearance 調整顏色與亮度，實現視覺上的段亮/滅效果。</p>
<p><strong>11. 如何於 Webots 控制器中動態改變顯示數字？</strong><br/>透過控制每個 segment 的亮滅狀態，並定義數字到七段顯示的對應表，定期更新。</p>
<p><strong>12. supervisor 屬性設為 TRUE 有何意義？</strong><br/>讓控制器具備場景管理權限，可操作其他節點與控制協同模擬。</p>
<p><strong>13. 如何安裝並執行 Webots websocket server 端的 Python 程式？</strong><br/>安裝 Python 3，使用 pip install websockets，執行 server 程式並設定 IPv6 與 port。</p>
<p><strong>14. Webots 機器人控制程式如何與 Websocket server 整合？</strong><br/>控制器內建立 WebSocket 客戶端連線，接收指令後透過 API 控制機器人行為。</p>
<p><strong>15. Websocket server 端需如何正確設定 IPv6 地址與 port？</strong><br/>設定監聽地址為 IPv6 格式 [::] 或指定地址，選擇未被佔用的 port，並開啟防火牆對應規則。</p>
<p><strong>16. Websocket client 端如何發送控制指令給 KUKA YouBot 平台車？</strong><br/>以 JSON 格式封裝指令，透過 WebSocket 傳送到 server，再由 server 解析並轉給 Webots 控制器。</p>
<p><strong>17. server 端如何解析接收到的 JSON 指令？</strong><br/>使用 JSON 解析庫（如 Python json 模組）讀取內容，依照欄位決定控制命令。</p>
<p><strong>18. YouBot 四輪的馬達名稱在控制程式中如何對應？</strong><br/>通常命名為 wheel1、wheel2、wheel3、wheel4，依實體位置對應控制。</p>
<p><strong>19. set_wheel_velocity 函數作用為何？</strong><br/>設定四個輪子的旋轉速度以控制移動方向與速度。</p>
<p><strong>20. 如何利用鍵盤直接在串流伺服器電腦上控制 YouBot 平台車的移動？</strong><br/>在 Webots GUI 透過鍵盤事件控制馬達速度，並在控制器程式內監聽鍵盤輸入。</p>
<p><strong>21. Webots websocket 架構如何支援多人協同操作？</strong><br/>多個 client 連線至同一 WebSocket server，server 分發指令並同步模擬狀態。</p>
<p><strong>22. 若要讓 Webots client 可跨平台遠端控制，需注意什麼？</strong><br/>確保 WebSocket 協定跨平台支援，前端 UI 適配多裝置，並確保網路連線穩定。</p>
<p><strong>23. 七段顯示器中的每個 segment 如何以程式切換其亮度？</strong><br/>動態調整 Appearance 節點中 diffuseColor 或 transparency 屬性，模擬開關。</p>
<p><strong>24. 如何將學號依序顯示於七段顯示器上（八個位數）？</strong><br/>依序分配至多個七段顯示器的 segment，並透過控制器逐字點亮。</p>
<p><strong>25. 若模擬串流畫面在瀏覽器無法正常顯示，可能的原因以及解決辦法為何？</strong><br/>原因可能有防火牆阻擋、HTTPS 憑證問題、IPv6 不通、Port 被佔用，解決方式為調整防火牆、更新憑證、檢查網路設定。</p>
<p><strong>26. Webots 場景中 Material 的 diffuseColor 如何設定顯示顏色？</strong><br/>使用 [R G B] 三維向量設定物件表面主顏色，值介於 0~1。</p>
<p><strong>27. Webots 伺服器啟動後，如何讓其他組員的電腦以 https 協定成功連線？</strong><br/>配置有效憑證（如 Let's Encrypt）、設定 server 支援 HTTPS，並開放對應 port。</p>
<p><strong>28. 當 Websocket server 收到無效資料時，會如何處理？</strong><br/>通常會丟出例外或忽略該訊息，並維持連線穩定。</p>
<p><strong>29. 若要錄製協同操作過程的影片，建議採用哪些工具？</strong><br/>使用 OBS Studio、VLC、或 Webots 內建錄影功能。</p>
<p><strong>30. 完成所有操作後，如何整理並上傳操作影片與心得到作業網站？</strong><br/>將影片壓縮至合適大小，撰寫心得報告，依照平台要求格式上傳。</p>
<p><strong>31. 如何確認 webotsw --stream 已成功啟動並可外部連線？</strong><br/>觀察終端顯示「Server started」訊息，並嘗試用瀏覽器連接指定 IPv6 + port 測試是否能看到畫面。</p>
<p><strong>32. 若使用 IPv4，Webots stream 是否能正常協同運作？為什麼？</strong><br/>理論上可用，但 IPv4 有 NAT 穿透問題且數量有限，較不利直接跨網段協同，故推薦使用 IPv6。</p>
<p><strong>33. 如何在 Webots GUI 內檢查目前串流位址與 port？</strong><br/>在 Webots 主介面左下方的 Stream 面板可查看目前伺服器的 IPv6 位址與埠號。</p>
<p><strong>34. 若 Webots stream 預設 port 被佔用，如何更換？</strong><br/>啟動時使用參數指定其他 port，如 webotsw --stream --port=xxxx。</p>
<p><strong>35. 該如何判斷自己的 Webots 模擬畫面已被協同組員成功觀看？</strong><br/>可從 server log 中觀察有無 client 連線紀錄，或請組員回報是否正常看到畫面。</p>
<p><strong>36. 七段顯示器 counter 場景中，如何快速切換不同數字字型或顏色？</strong><br/>透過更換 Appearance 節點的 Material 或 Mesh 來改變字型、顏色，控制器可動態設定。</p>
<p><strong>37. Webots 場景若需顯示多行學號，設計上應如何調整？</strong><br/>擴增七段顯示器數量，調整 Pose 節點位置排版，多層次顯示。</p>
<p><strong>38. 若 counter 專案的 mesh 檔案損毀或缺漏，該如何處理？</strong><br/>重新取得 mesh 檔案備份，或重新製作替代模型，並修正場景引用。</p>
<p><strong>39. Webots 場景中的 Pose 節點有何進階應用？</strong><br/>可動態控制物件位置與方向，實現動畫、跟隨、碰撞偵測等。</p>
<p><strong>40. 如何設計可動態調整顯示器間間距的三位數 counter？</strong><br/>使用可程式調整的 Pose 節點參數，透過控制器改變顯示器相對位置。</p>
<p><strong>41. 在 Webots 控制器中，該如何實作數字到七段顯示的對應表？</strong><br/>使用陣列或字典儲存 0~9 各數字的 7 段開關狀態，控制各 segment 亮滅。</p>
<p><strong>42. 為何 supervisor 設為 TRUE 可輔助協同模擬</strong>？<br/>可由 supervisor 控制多節點狀態與協調，實現跨 client 同步與管理。</p>
<p><strong>43. 若 Webots stream 畫面延遲不順，可能原因為何？如何改善？</strong><br/>原因包括網路頻寬不足、伺服器負載過高、串流壓縮效能不佳，改善方法有優化網路、降低解析度、增加硬體資源。</p>
<p><strong>44. Webots 場景中 Material transparency 屬性應用於哪些場合？</strong><br/>用於玻璃、半透明物件、疊加視覺效果。</p>
<p><strong>45. 在 Webots 場景如何插入自訂 LOGO 或圖片？</strong><br/>利用 ImageTexture 或 TextureTransform 節點將圖片貼於物件表面。</p>
<p><strong>46. 若需在 Webots stream 畫面同步顯示多位協同學員學號，該如何設計？</strong><br/>建立多組七段顯示器分區，控制器接收多學號資料並同步更新顯示。</p>
<p><strong>47. Webots websocket server 的 thread 設計有何優缺點？</strong><br/>優點：多線程可提升併發能力，缺點：需注意資源競爭與同步。</p>
<p><strong>48. Python server 端如何確保多 client 指令不互相衝突？</strong><br/>使用鎖（Lock）、佇列（Queue）與事件機制來同步操作。</p>
<p><strong>49. Webots 控制器如何即時取得網路指令並反應於模擬中？</strong><br/>於主迴圈中持續監聽 WebSocket，解析指令後更新機器人狀態。</p>
<p><strong>50. 若 websocket client 端與 server 端版本不合，會發生什麼現象？</strong><br/>連線失敗或訊息解析錯誤，導致功能異常。</p>
<p><strong>51. 如何設計 client 按鍵防止抖動，並避免重複控制？</strong><br/>利用軟體去彈跳演算法（debounce），如設定按鍵冷卻時間，避免重複觸發。</p>
<p><strong>52. YouBot 的四輪馬達如何實作橫向移動？</strong><br/>透過四輪的不同速度與方向組合，利用全向輪特性實現橫向平移。</p>
<p><strong>53. 若要在 Webots stream 畫面加上即時計時器，應如何設計？</strong><br/>在場景中新增文字節點，控制器更新文字內容，並同步於串流畫面。</p>
<p><strong>54. Webots 場景中如何設計物件碰撞事件的偵測與回報？</strong><br/>利用碰撞感測器節點或 Supervisor 監控物件接觸狀態，事件發生時回報。</p>
<p><strong>55. 若要實現 Webots stream 的多語系使用者介面，需調整哪些設定？</strong><br/>在前端 UI 加入多語言文字資源與切換功能，控制器根據語系切換顯示。</p>
<p><strong>56. 如何管理並同步多組員的協同模擬操作紀錄？</strong><br/>設計 centralized log 系統或使用版本控制同步操作檔案。</p>
<p><strong>57. 若七段顯示器需支援動態亮度調整，如何設計與實作？</strong><br/>調整 segment 透明度或 Material 參數，控制器根據需求變更。</p>
<p><strong>58. Webots websocket 架構下如何實現自訂訊息格式與指令集？</strong><br/>定義 JSON 結構並於 server/client 解析相應指令，擴充功能。</p>
<p><strong>59. 若 KUKA youBot 需自動避障，Webots 場景與控制程式需如何修改？</strong><br/>場景加入感測器（如超音波、雷射），控制器加入避障演算法。</p>
<p><strong>60. 完成協同模擬後，如何設計自動產生操作報告或 log？</strong><br/>控制器將重要事件與指令寫入檔案，或透過 Supervisor 收集狀態生成報告。</p>
<p><strong>61. Webots stream 支援哪些常見瀏覽器？</strong><br/>支援 Chrome、Firefox、Edge 等現代瀏覽器。</p>
<p><strong>62. 如何設定 Webots stream 的密碼或存取權限？</strong><br/>可在 websocket server 端加入認證機制，或使用 HTTPS + token 控制。</p>
<p><strong>63. IPv6 網址與 IPv4 最大的差異為何，對協同模擬有何影響？</strong><br/>IPv6 位址多且直連，適合跨網段協同，IPv4 受限 NAT 穿透與地址不足。</p>
<p><strong>64. 若無法取得預分配的 IPv6 位址，該如何處理？</strong><br/>嘗試手動設定本地鏈路地址或使用 VPN 服務取得 IPv6。</p>
<p><strong>65. Webots stream 預設的串流影像格式與壓縮方式為何？</strong><br/>一般使用 VP8 或 H.264 編碼的 WebRTC 影像串流。</p>
<p><strong>66. 若多名協同組員同時連入一台 Webots stream server，系統負載會有何變化？</strong><br/>伺服器負載增加，可能影響畫面延遲與流暢度。</p>
<p><strong>67. Webots stream 是否支援聲音同步串流？如何測試？</strong><br/>目前主要支援影像串流，聲音串流較少見，需自行實作測試。</p>
<p><strong>68. 七段顯示器 counter 若要顯示負數，需修改哪些設計？</strong><br/>加入負號顯示 segment，控制器判斷數值正負並顯示。</p>
<p><strong>69. 如何於 Webots 控制器實現七段顯示器的動畫效果？</strong><br/>透過定時更新 segment 狀態，逐格切換實現動畫。</p>
<p><strong>70. 若要讓顯示器自動根據資料自適應字型大小，應如何調整？</strong><br/>控制 Pose 節點縮放比例，或改變 mesh 尺寸動態調整。</p>
<p><strong>71. Webots 場景如何支援動態生成新的七段顯示器（非預設個數）？</strong><br/>利用 Supervisor API 動態新增節點並設定位置與外觀。</p>
<p><strong>72. Webots 場景與控制程式如何分工設計，便於多人協同開發？</strong><br/>場景負責物件與環境設計，控制器實作邏輯與行為，分工明確。</p>
<p><strong>73. 若 websocket server 在運行時異常中斷，如何讓 client 端自動重連？</strong><br/>Client 實作重連機制，如延時重連與最大嘗試次數設定。</p>
<p><strong>74. Webots 控制器可否同時接收多個資料來源（例如鍵盤與 websocket）？</strong><br/>可以，需在主迴圈中分別監聽並處理不同事件。</p>
<p><strong>75. YouBot 的馬達速度上限與實際輪速不符時如何校正？</strong><br/>透過實驗量測誤差並修正控制輸出參數。</p>
<p><strong>76. 如何於 Webots 場景中實現多車協同控制？</strong><br/>場景中放置多台機器人，控制器負責分別管理各車動作。</p>
<p><strong>77. 自訂 Webots 場景需如何打包分享給他人？</strong><br/>將所有場景檔、mesh、PROTO 及控制程式打包成壓縮檔。</p>
<p><strong>78. Webots stream 若需跨校協同，網路環境需符合哪些條件？</strong><br/>需具備穩定 IPv6 網路環境及足夠頻寬。</p>
<p><strong>79. 若有組員無法觀看 stream，如何進行遠端協助排錯？</strong><br/>檢查防火牆、網路連線與瀏覽器相容性，遠端指導設定。</p>
<p><strong>80. Webots 控制器如何實現對協同事件的同步日誌記錄？</strong><br/>設計 log 機制，將事件與時間戳存檔或傳送至中央紀錄系統。</p>
<p><strong>81. Webots websocket 訊息傳輸時如何避免封包遺失？</strong><br/>WebSocket 協定內建 TCP 傳輸，確保資料完整性。</p>
<p><strong>82. 若 Webots stream 畫面出現黑屏，應從哪些層面排查？</strong><br/>檢查網路、瀏覽器支援度、伺服器狀態與串流設定。</p>
<p><strong>83. Webots 七段顯示器能否顯示英文字母？如何設計？</strong><br/>可，設計對應字母的 segment 組合並擴充對應表。</p>
<p><strong>84. 如何改進 Webots 場景效能以支援高解析度及多用戶串流？</strong><br/>優化模型數量與細節，調整串流解析度與幀率。</p>
<p><strong>85. Webots 控制器如何偵測與回應 websocket client 斷線事件？</strong><br/>監聽斷線事件並實作重連或錯誤處理機制。</p>
<p><strong>86. 若需在 stream 畫面疊加即時文字訊息，可用哪些技術或結構？</strong><br/>可使用 Overlay 文字節點，或前端 UI 疊加。</p>
<p><strong>87. Webots 場景的 Version 區段有何用途？何時需調整？</strong><br/>標明場景檔版本，場景升級或相容性變更時調整。</p>
<p><strong>88. 如何設計 Webots 控制器的多語系訊息顯示？</strong><br/>使用多語言字串資源並根據用戶設定切換。</p>
<p><strong>89. 若組員在不同時區，如何協調協同模擬的時間安排？</strong><br/>透過共用日曆與線上會議排定同步時間。</p>
<p><strong>90. 完成協同作業後，如何進行模擬結果的量化評估？</strong><br/>統計模擬數據，產生圖表與報告，進行比較分析。</p>
<p></p><h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<p><a href="/downloads/RG.zip">final</a></p>
<p>製作過程</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/uzsQ7T6ozhg" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 41023216 - 完整的製作過程" width="640"></iframe></p>
<p>操作過程</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Bz3QvUKzSoA" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 41023216 - 操作過程" width="640"></iframe></p>
<p><a href="https://1drv.ms/p/s!AvoTOLcuNkgKgQkKZNyZOy0ud4Vm?e=8bIhkI">ppt</a></p>
<p><iframe frameborder="0" height="288px" src="https://1drv.ms/p/s!AvoTOLcuNkgKgQlmmrvU2-xHiqTt?embed=1&amp;em=2&amp;wdAr=1.7777777777777777" width="476px">這是 <a href="https://office.com/webapps" target="_blank">Office</a> 提供的內嵌 <a href="https://office.com" target="_blank">Microsoft Office</a> 簡報。</iframe></p>
<p><a href="https://drive.google.com/file/d/1fFrNZlc587llIQRoHWUApTbpYB1_BXTS/view?usp=drive_link">pdf</a></p>
<p><iframe allow="autoplay" height="300" src="https://drive.google.com/file/d/1fFrNZlc587llIQRoHWUApTbpYB1_BXTS/preview" width="500"></iframe></p>
<p>心得:</p>
<p> 這次的FINAL跟之前比起來難了很多，在製作的過中，遇到了許多問題，在程式的部分出現的許多問題，所以花了許多時間 ，去把錯誤的部分找出來，也幸好有組員有認識，了解程式的朋友，幫我找到程式哪裡出現了錯誤，才能順利的完成。</p>
<p></p>
<p><strong>期末報告提問:</strong></p>
<p><strong>1. 本協同專案的目標與主要功能為何？</strong><br/>目標是設計並實作一個能自主移動並投籃的 youBot 輪車，結合籃框隨機移動與投籃計分系統，實現投籃遊戲模擬。</p>
<p><strong>2. 場景中包含哪幾個主要子系統或模組？</strong><br/>youBot 投籃輪車模組</p>
<p>籃框架（stand）移動模組</p>
<p>籃球產生與回收模組</p>
<p>記分板與顯示系統</p>
<p>控制器與感測器系統</p>
<p><strong>3. 如何在 Webots 中建立一個可移動的投籃輪車？</strong><br/>利用 youBot 的機構模型，設定四輪驅動馬達與位置感測器，並在控制器中編寫輪子速度指令實現移動。</p>
<p><strong>4. 籃框架的移動模式是如何設計與實現的？</strong><br/>籃框架以隨機方向與速度緩慢移動，透過控制器計算隨機移動向量並控制關節馬達驅動。</p>
<p><strong>5. 投籃輪車的移動控制與發射功能分別由哪些裝置組成？</strong><br/>移動控制由四個輪子馬達與位置感測器組成，發射功能由多個 HingeJoint 關節與馬達控制投籃機構。</p>
<p><strong>6. 如何設定投籃輪車的初始位置與限制其活動範圍？</strong><br/>在場景中設定 youBot 初始座標及朝向，並於控制器中加入位置判斷限制輪車活動範圍。</p>
<p><strong>7. 籃球如何於場景中建立、數量如何設定？</strong><br/>使用球體節點生成籃球，可透過場景檔或控制器程式動態增加或刪除，數量依遊戲需求設定。</p>
<p><strong>8. 如何設計並實作籃球的補球或回收（送球）機構？</strong><br/>設計感測器偵測籃球狀態，搭配發射裝置與送球裝置，控制器判斷何時補球並觸發送球動作。</p>
<p><strong>9. 投籃動作是如何由控制器程式觸發與執行的？</strong><br/>操作者透過鍵盤指令觸發投籃，控制器依序控制多關節馬達完成投籃動作。</p>
<p><strong>10. 操作者如何利用鍵盤控制輪車移動及投籃？</strong><br/>控制器監聽鍵盤事件，如方向鍵控制移動，特定按鍵觸發投籃機構。</p>
<p><strong>11. 投籃發射機構的關節與馬達如何配置與驅動？</strong><br/>多個 HingeJoint 關節串聯，馬達根據投籃角度與力量需求調整關節旋轉角度與速度。</p>
<p><strong>12. 籃框架的隨機慢速移動是怎麼實現的？</strong><br/>在控制器中產生隨機方向和速度，並限制移動範圍，使籃框架慢速且不規則地移動。</p>
<p><strong>13. 記分板的設計邏輯是什麼？如何判斷得分？</strong><br/>利用感測器偵測籃球通過籃框區域，判斷得分後更新計分板數值。</p>
<p><strong>14. 籃球進框判斷使用了哪些感測器或演算法？</strong><br/>使用 DistanceSensor 或 Receiver 偵測球是否通過籃框內特定區域。</p>
<p><strong>15. 投籃輪車與籃框架的碰撞設定如何調整？</strong><br/>設定適當的碰撞邊界盒與物理屬性，如質量和摩擦，防止穿透並觸發碰撞反應。</p>
<p><strong>16. 籃框架的位置與運動狀態如何被記錄或顯示？</strong><br/>控制器中持續讀取籃框架位置資料，並可透過視窗或終端機輸出顯示。</p>
<p><strong>17. 投籃次數與剩餘籃球數是如何統計與顯示的？</strong><br/>控制器統計發射次數與目前場上籃球數，並即時更新記分板或螢幕介面。</p>
<p><strong>18. 投籃遊戲結束條件的判定方式為何？</strong><br/>依剩餘籃球數用盡或預設投籃次數達成，控制器觸發遊戲結束狀態。</p>
<p><strong>19. 如何設計多台輪車或多名操作者協同投籃？</strong><br/>分配不同控制器或訊息頻道，並於程式中管理多台車的狀態及互動協調。</p>
<p><strong>20. 場景中各組件的物理屬性（質量、摩擦等）如何調整？</strong><br/>在場景檔中設定物理屬性節點參數，或透過控制器動態修改。</p>
<p><strong>21. YouBot 機構的四輪配置與移動原理為何？</strong><br/>YouBot 採用四輪差動驅動設計，四個輪子獨立控制，能實現前進、後退、旋轉及側移等多種移動模式。</p>
<p><strong>22. 投籃機構的多關節設計與驅動邏輯？</strong><br/>多個 HingeJoint 串聯，每個關節由馬達驅動，依序控制角度變化來完成投籃準備與發射動作。</p>
<p><strong>23. 如何實現籃球補球機構的自動偵測與動作觸發？</strong><br/>利用 DistanceSensor 或 Receiver 偵測籃球狀態，當球數不足時由控制器觸發補球機構啟動。</p>
<p><strong>24. 如何在 Webots 場景中顯示即時計分與剩餘球數？</strong><br/>透過七段顯示器或文字顯示節點，連結控制器變數並即時更新顯示內容。</p>
<p><strong>25. 投籃過程動畫與物理真實性的平衡關鍵為何？</strong><br/>需在關節運動速度與物理碰撞模擬間取得平衡，避免過度理想化而失真或過度延遲。</p>
<p><strong>26. 協同設計過程中，組員如何分工合作？</strong><br/>依功能模組分配（如控制器編寫、場景建模、感測器設定、介面設計等），定期整合與測試。</p>
<p><strong>27. 專案過程的影片、簡報與 PDF 報告應包含哪些重點？</strong><br/>專案目標、設計架構、主要功能實現、技術挑戰與解決方案、成果展示、心得與未來改進。</p>
<p><strong>28. 如何將專案過程影片嵌入報告網頁？</strong><br/>使用 HTML &lt;iframe&gt; 嵌入 YouTube 影片連結，並調整寬高參數以適應頁面。</p>
<p><strong>29. 若協同操作過程中發生衝突，如何協調與解決？</strong><br/>透過溝通、版本控制工具（如 Git）、定期會議與明確任務分工減少衝突。</p>
<p><strong>30. 專案結束後，如何整理心得並反饋於課程平台？</strong><br/>撰寫專案心得報告，分享學習成果與改進建議，上傳至指定平台並進行口頭報告。</p>
<p><strong>31. 請描述 youBot 投籃輪車在場景中的初始座標與朝向？</strong><br/>初始座標根據場景設定檔，通常設於場地起點，如 (x=0, y=0, z=0)，朝向一般為面向籃框方向。</p>
<p><strong>32. 場景中的 youBot 投籃車和籃框架 stand 機器人各自的控制器名稱是什麼？</strong><br/>常見分別為 youBot_controller 與 stand_controller，對應各自控制邏輯。</p>
<p><strong>33. 如何在 Webots 場景檔案中正確設置每個 wheel 的 RotationalMotor 名稱？</strong><br/>在 Robot 節點內，為每個輪子定義 Motor 節點並設定唯一名稱，便於控制器識別。</p>
<p><strong>34. 為什麼每個輪子旁邊都設有 PositionSensor？用途為何？</strong><br/>用於監測輪子旋轉角度與速度，實現精準控制與定位。</p>
<p><strong>35. 該如何利用 IMU 和 GPS 完成 youBot 的定點移動與旋轉？</strong><br/>IMU 提供姿態資訊，GPS 提供位置資訊，控制器融合兩者資料以精確導航。</p>
<p><strong>36. 如何設計 youBot 能夠精確側移指定距離？程式上如何判斷移動完成？</strong><br/>利用輪速計算移動距離，結合位置感測器或 GPS 判斷側移是否達標。</p>
<p><strong>37. 是否試過讓 youBot 自動從起點移動到指定座標並朝向某點嗎？描述操作步驟。</strong><br/>控制器計算目標路徑，調整輪速執行移動，並利用 IMU/GPS判斷是否達目標及調整朝向。</p>
<p><strong>38. 在控制器內，如何區分前進、後退、旋轉、側移等不同移動模式？</strong><br/>依輪子速度設定與方向分配判斷，如全輪同速前進為前進，左右輪反向差速為旋轉。</p>
<p><strong>39. 在程式中 set_wheel_velocity 的四個參數順序分別對應哪四個輪子？</strong><br/>一般順序為前左、前右、後左、後右輪（依設計可能不同，需參考場景設定）。</p>
<p><strong>40. YouBot 的 Keyboard 控制有哪些特定按鍵操作？（請舉例說明）</strong><br/>方向鍵控制移動，空白鍵觸發投籃，W/S 控制速度，A/D 控制旋轉。</p>
<p><strong>41. 投籃機構的多個 HingeJoint 關節是如何層層串接的？結構如何設計？</strong><br/>多個 HingeJoint 依序串接，每個關節角度影響下一個關節位置，形成投籃機構的靈活運動。</p>
<p><strong>42. 如何觸發投籃發射動作？對應按鍵是什麼？程式流程為何？</strong><br/>通常設定按鍵（如空白鍵）觸發發射事件，控制器依序控制投籃關節角度加速，完成投籃動作。</p>
<p><strong>43. 籃框架 stand 的移動演算法是否有隨機性？該如何實現？</strong><br/>有隨機慢速移動，使用隨機數生成移動方向與速度，並限制在場地範圍內。</p>
<p><strong>44. 補球/送球機構自動補球的訊息傳遞流程是什麼？使用了哪些 Webots 裝置？</strong><br/>使用 Emitter 發送補球請求，Receiver 接收並回傳狀態，控制器根據訊息啟動補球動作。</p>
<p><strong>45. Emitter/Receiver 在記分板與補球控制中扮演什麼角色？請詳細說明一個訊息傳遞範例。</strong><br/>Emitter 負責發送控制或狀態訊息，Receiver 接收並觸發動作。例如，投籃成功發送訊息給記分板更新分數。</p>
<p><strong>46. 七段顯示器記分板的 segment 如何根據得分訊息動態變色？</strong><br/>控制器根據得分數字啟用對應的 segment，改變 segment 顏色屬性以達成動態顯示。</p>
<p><strong>47. 投籃得分是根據哪個感測器資料來判斷？感測器設置於何處？</strong><br/>通常使用 DistanceSensor 或 Receiver，設置在籃框內側或底部判斷球是否成功進框。</p>
<p><strong>48. 是否設計過球進框後自動加分的程式嗎？其邏輯為何？</strong><br/>是，當感測器偵測到球通過籃框區域，控制器即更新分數並觸發記分板刷新。</p>
<p><strong>49. 如何防止球體與場景物件發生非預期的穿透或異常彈跳？</strong><br/>調整碰撞模型、物理參數（質量、彈性、摩擦），並提升模擬頻率。</p>
<p><strong>50. 請說明如何設定與調整球體和機械部件的質量、摩擦等物理參數。</strong><br/>在場景節點中設定 mass、friction、restitution 等屬性，依需求調整。</p>
<p><strong>51. 是否試過多台 youBot 輪車同場協同投籃嗎？多機協同時，訊息或控制會有什麼衝突？</strong><br/>多台同場會產生訊息重疊與控制衝突，需使用不同通訊頻道與明確分工避免干擾。</p>
<p><strong>52. 補球流程中如何確保每次只會有一顆球被正確補給到輪車？</strong><br/>透過感測器偵測球的狀態與位置，控制器分階段補球，防止同時多球補給。</p>
<p><strong>53. 若希望依據剩餘球數或投籃次數動態結束遊戲，程式該如何編寫？</strong><br/>設計計數器追蹤剩餘球數與投籃次數，達到設定值後觸發遊戲結束流程。</p>
<p><strong>54. 自動補球與自動投籃能否串接成完整循環？你如何設計流程與狀態管理？</strong><br/>能，設計狀態機管理補球、移動、投籃等行為，依序執行並循環。</p>
<p><strong>55. 場景中 Viewpoint 設定有何作用？你試過調整攝影機角度觀察不同視角嗎？</strong><br/>Viewpoint 設定初始攝影機位置與朝向，可透過程式調整觀察場景不同角度。</p>
<p><strong>56. 請描述該如何嵌入 YouTube 影片到個人或分組期末報告網頁？</strong><br/>使用 &lt;iframe src="YouTube影片網址" width="寬度" height="高度"&gt;&lt;/iframe&gt; 將影片嵌入。</p>
<p><strong>57. 專案過程中曾遇到什麼協作或整合困難？如何解決？</strong><br/>版本衝突、模組整合不一致，透過 Git 分支管理與協同會議改善。</p>
<p><strong>58. 如何調整記分板七段顯示器 segment 的顏色及樣式？</strong><br/>修改 segment 節點的 Appearance 屬性，如 diffuseColor 來改變顏色。</p>
<p><strong>59. 場景與控制器檔案如何在其他同組協同組員的電腦上執行？</strong><br/>共享完整場景與控制器檔案，確保版本一致，並統一 Webots 版本。</p>
<p><strong>60. 該如何驗證投籃流程、計分、補球、遊戲結束等每個功能都運作正常？</strong><br/>設計測試案例，觀察模擬行為並比對預期結果，記錄異常並修正。</p>
<p><strong>61. 請自行於 Webots 場景新增或刪除一顆籃球？操作步驟為何？</strong><br/>開啟 Webots 場景編輯器，從物件庫拖入新的球體節點或刪除現有球節點，並調整位置。</p>
<p><strong>62. 如何在場景中設定籃球的尺寸、顏色與物理屬性？</strong><br/>在球體節點內修改 geometry 大小，appearance 顏色，並設定 mass、friction 等物理屬性。</p>
<p><strong>63. 是否試過修改 youBot 或 stand 機構的質量或摩擦係數嗎？如何修改？</strong><br/>是，修改對應節點中的物理屬性欄位，如 mass、frictionCoefficient。</p>
<p><strong>64. 若要限制 youBot 只能於指定區域活動，如何於控制器實作？</strong><br/>透過讀取位置座標，判斷是否超出區域範圍，超出則阻止或修正移動指令。</p>
<p><strong>65. 該如何設定並驗證 youBot 的初始朝向與旋轉角度？</strong><br/>在場景檔中設定 youBot 的 translation 與 rotation，並在程式中讀取確認。</p>
<p><strong>66. 場景中籃框（stand）如何設定隨機移動的範圍與方向？</strong><br/>定義移動範圍邊界，利用隨機數生成速度向量，並在每次更新中調整方向。</p>
<p><strong>67. 你試著讓投籃輪車自動對準並靠近籃框嗎？程式邏輯是什麼？</strong><br/>利用距離感測器或定位資料計算相對位置，控制輪車朝籃框方向移動至指定距離。</p>
<p><strong>68. 當投球未命中籃框時，如何於程式中記錄「未得分」？</strong><br/>偵測球未通過籃框判斷區域，增加未得分計數，並更新介面或紀錄。</p>
<p><strong>69. 你曾經手動重置全部籃球的位置嗎？操作流程為何？</strong><br/>透過控制器程式重置球的 translation 屬性，或於場景中手動調整位置。</p>
<p><strong>70. 你是否嘗試過將計分板顯示改為兩位數或四位數？如何調整？</strong><br/>調整七段顯示器組合數量，或擴展顯示邏輯來支援更多位數。</p>
<p><strong>71. 如何讓記分板在遊戲結束後自動顯示「Game Over」或其他訊息？</strong><br/>控制器偵測遊戲結束條件後，改變記分板文字或顯示特定圖形。</p>
<p><strong>72. 你是否有針對球體數量不足時自動補球？程式如何設計？</strong><br/>有設計監控球數，低於門檻時觸發補球機構補充新球。</p>
<p><strong>73. 如何於控制器中實現「投球冷卻時間」以防止連續發射？</strong><br/>設計計時器，發射後設定冷卻時間，期間忽略投籃命令。</p>
<p><strong>74. 你能否讀取與顯示 youBot 的即時速度或移動路徑？</strong><br/>可透過 GPS 與速度感測器讀取數據，在介面或終端顯示。</p>
<p><strong>75. 你有測試過將投籃流程的控制訊息以文字訊息（如LOG）即時顯示在終端機嗎？</strong><br/>是，使用 printf 或類似函式印出投籃狀態與分數。</p>
<p><strong>76. 場景中的 DistanceSensor 如何設定量測距離與靈敏度？</strong><br/>設定 DistanceSensor 的最大量測距離及靈敏度參數。</p>
<p><strong>77. 是否有令籃框架進行非線性或加速度運動？如何實作？</strong><br/>可以透過控制器實現加速度曲線，動態調整速度值。</p>
<p><strong>78. 如何將 youBot 移動與投籃流程整合成一個自動化測試腳本？</strong><br/>編寫序列動作流程，依序控制移動與投籃，並加入條件判斷。</p>
<p><strong>79. 是否試過在同一場景下同時建立兩個以上的計分板嗎？操作方式為何？</strong><br/>可複製記分板節點，並設置不同通訊通道與控制邏輯。</p>
<p><strong>80. 如何於 Webots 場景中加入倒數計時器或遊戲計時功能？</strong><br/>利用控制器內建計時函式實現，並用顯示器節點呈現時間。</p>
<p><strong>81. 能否於程式中偵測 youBot 是否卡住或發生碰撞？如何處理？</strong><br/>透過讀取速度感測器與碰撞感測器數據，若速度長時間低於閾值且發生碰撞，觸發停車或重新導航。</p>
<p><strong>82. 當有多台 youBot 輪車時，如何區分各自的控制與訊息通道？</strong><br/>每台 youBot 設置獨立的控制器名稱與通訊頻道，確保訊息不互相干擾。</p>
<p><strong>83. 若希望將補球機構設計為「多點補球」，該如何設計？</strong><br/>設計多個送球點與感測器，控制器根據需求選擇合適位置發送球。</p>
<p><strong>84. 是否測試過不同籃球質量對投籃飛行軌跡的影響？結果如何？</strong><br/>有測試，較重籃球飛行距離縮短且下墜快，較輕則飛得較遠但較易受風影響。</p>
<p><strong>85. 如何於模擬中手動或自動錄製並回放投籃過程？</strong><br/>Webots 內建錄影功能，或在控制器中記錄狀態並重播。</p>
<p><strong>86. 是否能於控制器程式內同時整合多種鍵盤/滑鼠/自動控制模式？</strong><br/>可透過狀態切換機制，讓控制器根據模式選擇輸入來源。</p>
<p><strong>87. 若曾遇到過場景載入出現 mesh 檔案遺失或錯誤，該如何排除？</strong><br/>確認檔案路徑正確，重新放置檔案，或修正場景檔引用。</p>
<p><strong>88. 是否於專案過程中建立過專屬的 proto 或自訂場景物件？如何設計？</strong><br/>有，使用 Webots 的 proto 語法定義專屬物件結構與參數。</p>
<p><strong>89. 如何批次測試多種投籃參數（如角度、力度）並記錄結果？</strong><br/>透過程式設定參數迴圈，自動執行投籃並記錄分數與狀態。</p>
<p><strong>90. 當 Webots 更新版本或變更 API，該如何維護與修正原有專案？</strong><br/>閱讀更新說明，調整程式與場景中不相容的部分，測試功能完整性。</p>
<p></p><h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<p h2=""><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p h2=""><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p h2=""><!-- editor1 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p h2=""><!-- editor1 結束 --></p>
<hr/>
<p h2=""><!-- ########################################## --></p>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p h2=""><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p h2=""><!-- editor2 結束 --></p>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>