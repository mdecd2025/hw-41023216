<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>41023216</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-41023216/">https://mdecd2025.github.io/hw-41023216/</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-41023216">https://github.com/mdecd2025/hw-41023216 </a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表</p>
<h1>Tasks</h1>
<h2>task1</h2>
<h4>自行製作可攜程式系統</h4>
<p>此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境.</p>
<p>以下為操作步驟:</p>
<ol>
<li>下載<span> </span><a href="http://229.cycu.org/portable_python311.7z">portable_python311.7z</a>, 展開後是一套尚未安裝 pip 的 Python 3.11 可攜程式環境.</li>
<li>雙點擊 portable_python311 目錄中的 start_ipv6.bat 啟動可攜系統, 在 SciTE 中開啟 Y:\<a href="https://mdecd2025.github.io/hw-scrum-1/downloads/gen_python313.py">gen_python313.py</a>, 以下拉式功能表 Tools - Go 執行, 便可在 Y:\ 建立 Python313 目錄.</li>
<li>接著修改 start_ipv6.bat, 利用 Search - Replace, Find 欄位填上 Python311, Replace 欄位填上 Python313 後, 按下 Replace All, 便可將啟動檔中所有 Python311 設定改為 Python313, 另存修改後的檔案為 start_python313.bat.</li>
<li>接下來以 stop.bat 關閉 start_ipv6.bat 開啟的可攜系統, 改以心建立的 start_python313.bat 開啟可攜環境, 之後在命令列輸入 python, 確認目前的 Python 版本為 3.13.2 後, 利用 Ctrl + z 退出 Python 後, 利用 pip list 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具.</li>
<li>在命令列中, 以 python get-pip.py 安裝 pip 工具, 完成後, 以 pip list 確認 pip.exe 已經配置完成.</li>
<li>最後在命令列中, 以 pip install flask flask_cors bs4 lxml pelican markdown 安裝 cmsimde 網際內容管理系統啟動所需的 Python 模組後, 此可攜系統中的 Python 3.13.2 套件已經可以用來維護個人作業倉儲與分組倉儲.</li>
<li>之後利用新版的<span> </span><a href="https://www.scintilla.org/SciTEDownload.html">SciTE</a>,<span> </span><a href="https://git-scm.com/downloads/win">Portablegit</a>,<span> </span><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PUTTY</a>,<span> </span><a href="https://github.com/ShareX/ShareX/releases">ShareX</a>,<span> </span><a href="https://www.debugmode.com/wink.html">Wink</a>,<span> </span><a href="https://solvespace.com/download.pl">Solvespace</a>,<span> </span><a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/zoomit">Zoomit</a>,<span> </span><a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/process-explorer#download">ProcessExplorer</a><span> </span>以及原有的 tmp 及 home_ipv6, 以新的 start_python313 啟動.</li>
</ol>
<p>以下為操作影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/wAlFl1lNQv0" title="41023216 協同產品設計實習 自行建立可攜程式系統" width="640"></iframe></p>
<h3>list</h3>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?
src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2b_group.py">列出 2b 分組網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/29173e8b73ad422fd7c44bcd93658a3579d63633/list_stage_3.py">列出 2b 學員作業網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/48af059c96052719dc03d5fe8ee8af9a6033afc7/w4_2b_ipv6_stud_num.py">2b IPv6 port 8000 連線列表</a></p>
<p>個人網站/倉儲:</p>
<p>2b:</p>
<p><span>41023213：</span><a href="https://mdecd2025.github.io/hw-41023213/">https://mdecd2025.github.io/hw-41023213/</a> </p>
<p>                 <a href="https://github.com/mdecd2025/hw-41023213">https://github.com/mdecd2025/hw-41023213</a></p>
<p><span>41023215：</span><a href="https://mdecd2025.github.io/hw-41023215/">https://mdecd2025.github.io/hw-41023215/</a></p>
<p>                 <a href="https://github.com/mdecd2025/hw-41023215">https://github.com/mdecd2025/hw-41023215</a></p>
<p><span>41023216: <a href="https://mdecd2025.github.io/hw-41023216/">https://mdecd2025.github.io/hw-41023216/</a></span></p>
<p><span>                 <a href="https://github.com/mdecd2025/hw-41023216">https://github.com/mdecd2025/hw-41023216</a></span></p>
<p><span>41071202：<a href="https://mdecd2025.github.io/hw-41071202/">https://mdecd2025.github.io/hw-41071202/</a></span></p>
<p><span>                 <a href="https://github.com/mdecd2025/hw-41071202">https://github.com/mdecd2025/hw-41071202</a></span></p>
<p><span>41071203：</span><a href="https://mdecd2025.github.io/hw-41071203/">https://mdecd2025.github.io/hw-41071203/</a> </p>
<p>                 <a href="https://github.com/mdecd2025/hw-41071203">https://github.com/mdecd2025/hw-41071203</a></p>
<p><span>41071204：</span><a href="https://mdecd2025.github.io/hw-41071204/">https://mdecd2025.github.io/hw-41071204/</a></p>
<p>                 <a href="https://github.com/mdecd2025/hw-41071204">https://github.com/mdecd2025/hw-41071204</a></p>
<p></p>
<p>分組:</p>
<p>2b: <span> </span></p>
<p>      <a href="https://mdecd2025.github.io/2b-g8/">https://mdecd2025.github.io/2b-g8/</a></p>
<p>      <a href="https://github.com/mdecd2025/2b-g8">https://github.com/mdecd2025/2b-g8</a></p>
<p></p>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?
src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2b_group.py"></a></p>
<h2>task2</h2>
<h4>使用 SSH 協定執行作業倉儲的推送</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="360" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/S-PhyOpH-fo" title="ssh" width="640"></iframe></p>
<p><a href="https://zh.wikipedia.org/zh-tw/Secure_Shell">SSH</a><span> </span>是一種加密的網路傳輸協定, PuTTY 則是可用於 Windows 環境的 SSH 協定工具, 其中支援遠端登入 (putty.exe) 與檔案傳輸工具 (psftp.exe).</p>
<p></p>
<p>使用 PuTTY 所建立的公私鑰進行 Github push 認證的步驟:</p>
<p>第一步:</p>
<p>若希望在 Windows 環境透過 git 指令, 使用 PuTTY 設定的 session (一個代表連線伺服器主機、私鑰位置與是否使用代理主機等資訊的字串), 執行 push, 必須要在啟動可攜環境時, 設定 GIT_SSH 環境變數, 將此變數指向 PuTTY 套件中的 plink.exe 位置 (也就是 set GIT_SSH=%Disk%:\putty\plink.exe).</p>
<p>第二步:</p>
<p>指定利用 PuTTY 的 SSH session 執行 git push 後, 必須在 Windows 操作系統中選擇一個字串, 作為 SSH 連線 session 名稱, 由於此設定必須指向 SSH 協定加密用的私鑰所在目錄位置, 因此設定 session 之前, 必須利用 puttygen.txt 建立一對公私鑰, 其中的公鑰為 OpenSSH 格式, 必須送到使用者 Github 帳號設定區 (Settings) 的 SSH and GPG keys 中.</p>
<p>第三步:</p>
<p>利用 puttygen.exe 建立公私鑰的方法, 是在執行 puttygen.exe 之後, 以滑鼠按下 Generate 之後, 讓滑鼠在 puttgen.exe 視窗中 key 下方的空白區域隨意移動, puttygen.exe 會根據滑鼠移動的位置隨機建立 OpenSSH 格式的公鑰, 以及配對的 PuTTY 格式的 Private Key (副檔名為 .ppk)</p>
<p>第四步:</p>
<p>接下來, 將 OpenSSH 格式的 Public Key 內容複製到個人 Github 帳號設定區的 SSH and GPG keys 中, 並以 puttygen.exe 執行視窗右下方的 Save private key 按鈕, 將私鑰 (假設為 myprivatekey.ppk) 存至 Y:\.</p>
<p>第五步:</p>
<p>接著啟動 PuTTY 中的 putty.exe, 在 Host Name (or IP Address) 欄位填入 github.com, 並確認 Connection Type 選用 SSH, 表示要透過 SSH 加密協定連線到 github.com.</p>
<p>第六步:</p>
<p>接著在 putty.exe 視窗下方的 Saved Sessions 填入一組字串, 此字串就是之後要遠端登入 github.com 設定 push 連線 URL 的 session 名稱, 在此假設選擇 "mysession(41023216)" 作為 session 名稱, 使用者可以自行選擇具有代表性的字串, 例如: 學號或簡短的英文姓名縮寫.</p>
<p>第七步:</p>
<p>在 putty.exe 視窗中填入 github.com 與 "41023216" 名稱之後, 點擊 Save 之後, 此 session 設定就會被 Windows 操作系統存入該台電腦的 Registry 登錄檔案中的 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 所在組態區. 此時可以在命令列中輸入 regedit 後進入登錄檔查看是否 41023216 已經存在.</p>
<p>第八步:</p>
<p>上列 "41023216" 設定完成且按下 Save 之後, 若再按下 Open, 採用 IPv4 網路連線的電腦應該已經可以透過 putty.exe 遠端連線至 github.com, 視窗中會出現 github.com 作為視窗標題, 且內容為 login as: 但一般使用者並沒有帳號可以直接透過 putty.exe 遠端登入到 github.com, 而只能在 session 設定完成後, 利用此 session 執行 git push.</p>
<p>第九步:</p>
<p>由於前面的 "41023216" 雖然已經存入 Windows 操作系統的登錄檔, 但並沒有設定 private key 的位置, 因此接下來要再開啟 putty.exe, load 進此一 session, 然後在此 session 設定左方的 Category: 下方的 Connection - SSH - Auth - Credentials 設定中的 Private key file for authentication: 區, 利用 Browse 選擇位於 Y:\ 的 myprivatekey.ppk 檔案. 選擇檔案完成後, 必須再回到 Catetory: 下方的 Session 區, 以右方的 Save 將附加私鑰位置設定的 session 存檔. 此時 Windows 登錄檔中的 "41023216" 除了代表要使用 SSH 連線到 github.com 之外, 還附帶指定了 myprivatekey.ppk 在 Y:\ 的位置.</p>
<p>第十步:</p>
<p>若上述設定是在電腦輔助設計室中的電腦進行, 必須利用命令列 regedit 指令, 進入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 位置, 利用滑鼠右鍵將此登錄設定檔案"匯出" 存入可攜程式 start_ipv6.bat 所在目錄, 此處假設命名為 41023216.reg, 使用者可以自行對 .reg 命名.</p>
<p>第十一步:</p>
<p>由於上列的 myprivatekey.ppk 存於可攜程式中的 Y:\, 因此當使用者利用 start_ipv6.bat 啟動可攜程式後, 就可以利用滑鼠雙點擊位於同目錄的 41023216.reg, 上述的 "41023216" 設定就會存入 Windows 操作系統的登錄檔中.</p>
<p>使用 PuTTY session 設定倉儲 .git/config 中的 URL</p>
<p>假設上列 "41023216" 對應中的 OpenSSH 格式公鑰是送到 Github 帳號為 scrum-1 學員的 SSH and GPG key 區域, 則 scrum-1 學員在啟動可攜系統後, 已經雙點擊 41023216.reg, 將前述 putty.exe 設定的 session 組態登錄設定回存至 Windows 操作系統中, 則 41023216 學員就可以將其近端作業倉儲中的 41023216 用於倉儲 .git/config 檔案的下方設定:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_91554">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">[remote </code><code class="js string">"origin"</code><code class="js plain">]</code></div>
<div class="line number2 index1 alt1"><code class="js spaces">    </code><code class="js plain">url = git@41023216:mdecd2025/2b-g8.git</code></div>
<div class="line number3 index2 alt2"><code class="js spaces">    </code><code class="js plain">fetch = +refs/heads/:refs/remotes/origin/</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>其中的 [remote "origin"] 表示當使用 git 指令中針對此倉儲 "origin" 是一個與遠端倉儲對應的字串代號, 代表其下兩項設定. url 代表此 "origin" 的倉儲連線網址, 而連線至此倉儲的協定是採遠端登入 (使用 Github 支援的 SSH 遠端登入協定), 且此遠端登入的帳號為 "git", 這是所有要使用 SSH 執行 git push 的用戶共同使用的登入帳號.</p>
<p>url 設定中 "@" 之後的 "41023216" 就是宣告要使用此電腦登錄檔中所設定的 session 名稱 (代表要連線到 github.com, 且帶的 myprivatekey.ppk, 準備在登入流程中與 github.com 中 mdewcm2025 帳號下的 hw-scrum-1 倉儲擁有者 (或帶有 repo 管理權限的帳號) 所登錄的 public keys 進行認證比對, 一旦通過認證, git push 指令就可以成功將改版資料推送到指定的倉儲區域.</p>
<h3>ipv6</h3>
<p><span>2b 各學員固定 IPv6 分配: 2001:288:6004:17:fff1:cd25:0000:b008</span><br/><span>gateway: 2001:288:6004:17::254</span><br/><span>dns server:</span><br/><span>2001:288:6004:17::3</span><br/><span>2001:b000:168::1</span></p>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?src=https://gist.githubusercontent.com/41023216/9e984bd34d911398681a154de93ce8b7/raw/91baff883da5df39839e094d485e58dee6135ae2/6-1.py">IPv6 port 8000 任務一</a></p>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?src=https://gist.githubusercontent.com/41023216/53137d5797468a192bd0f33cacc832bb/raw/c59be581247ce359c9970b9692bda70ba0e9fb6d/6-2.py">IPv6 port 8000 任務二</a></p>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?src=https://gist.githubusercontent.com/41023216/4a77d8ee3634a92407f5bf1035923f21/raw/5da3cb1d9c32abbb8a14ec2d269dd89f02879dc7/6-3.py">IPv6 port 8000 任務三</a></p>
<h3>W3</h3>
<p><a href="https://mdecd2025.github.io/hw-41023216/content/Brython.html?src=https://gist.githubusercontent.com/41023216/c7ea121d854e1f99a9959208ed1316d0/raw/3f678fe3b4f242a255f5ffbf75da133dfd57ca34/65-.py">2b未分組</a></p>
<h2>task3</h2>
<h4>使用 Solvespace 建立平面四連桿系統零組件</h4>
<p><a href="/downloads/fourbar_slvs.7z">四連桿機構</a></p>
<p></p><h2>task4</h2>
<h4>使用 Onshape 建立平面四連桿系統零組件 (HW2)</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/DoceBBsspqg" title="操作片2" width="666"></iframe></p>
<h3>w5</h3>
<p><br/><br/><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/fT1Z3-ZQhyA" title="操作影片" width="666"></iframe></p>
<h3>w6</h3>
<p><img caption="false" height="225" src="/images/未命名.jpg" width="400"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/tCLktsdc8WY" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41023216" width="666"></iframe></p>
<h3>w7</h3><h2>task5</h2>
<h4>Webots Tutorial 1 ~3</h4>
<p><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a></p>
<ol>
<li>請用繁體中文詳細說明下列資料:<span> </span><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots </a></li>
<li>請整理<span> </span><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a><span> </span>中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明.</li>
<li>請摘要出下列內容: (放入英文文章內容)</li>
<li>請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法:</li>
<li>請詳細說明如何採手動方式在 Webots 建立下列場景:</li>
<li>希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意?</li>
</ol>
<h3>Blander</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/i0ygKKAabNs" title="Blender 換顏色" width="666"></iframe></p><h3>問題一</h3>
<p>Webots 是一款開源的機器人模擬平台，旨在幫助用戶開發和測試機器人應用。它提供了一個高度可定制的虛擬環境，可以用來模擬各種機器人系統。Webots 支援多種機器人模型，並允許用戶根據需求進行編程與測試。該平台包含圖形界面、物理引擎、場景設計工具及各種感測器與執行器的模擬功能，適用於教育、研究和工程領域。</p>
<p></p>
<h3>問題二</h3>
<p>由於我無法直接從外部網站抓取內容來進行詳細分析，但我可以根據網站的主題來幫助你整理與 Webots 相關的重要單字和文法結構。這些主要涉及機器人模擬、程序設計以及機器人控制的相關術語。我會先列出一些關鍵字並說明其用法，然後針對常見的英文文法結構進行解釋。</p>
<h4>1. 關鍵英文單字與用法</h4>
<ul>
<li>
<p><strong>Simulation</strong> (模擬)</p>
<ul>
<li>
<p>用法：This term refers to the imitation of the operation of a real-world process or system over time. It is commonly used in Webots to describe the virtual environment where robots are tested.</p>
</li>
<li>
<p>範例："The simulation environment in Webots allows users to model robots."</p>
</li>
</ul>
</li>
<li>
<p><strong>Robot</strong> (機器人)</p>
<ul>
<li>
<p>用法：A robot is typically an autonomous machine that can perform tasks traditionally done by humans.</p>
</li>
<li>
<p>範例："Webots provides tools to design and control robots."</p>
</li>
</ul>
</li>
<li>
<p><strong>Environment</strong> (環境)</p>
<ul>
<li>
<p>用法：This refers to the space or setting in which something operates, in this case, the virtual space where the robot interacts.</p>
</li>
<li>
<p>範例："The virtual environment is highly customizable."</p>
</li>
</ul>
</li>
<li>
<p><strong>Sensor</strong> (感測器)</p>
<ul>
<li>
<p>用法：Sensors allow the robot to perceive its environment, such as cameras, GPS, or distance sensors.</p>
</li>
<li>
<p>範例："Webots supports various sensor models like cameras, GPS, and accelerometers."</p>
</li>
</ul>
</li>
<li>
<p><strong>Controller</strong> (控制器)</p>
<ul>
<li>
<p>用法：A controller in Webots refers to the software that runs on the robot to process input from sensors and control actions.</p>
</li>
<li>
<p>範例："You can write a controller in Python or C to control the robot."</p>
</li>
</ul>
</li>
<li>
<p><strong>Actuator</strong> (執行器)</p>
<ul>
<li>
<p>用法：An actuator is a device that performs actions such as moving a robot's arm or wheels.</p>
</li>
<li>
<p>範例："The motors are actuators that allow the robot to move."</p>
</li>
</ul>
</li>
<li>
<p><strong>Programming Interface</strong> (程式設計介面)</p>
<ul>
<li>
<p>用法：This is a set of tools and libraries that allow users to write software to interact with Webots and control the robot.</p>
</li>
<li>
<p>範例："Webots provides a comprehensive programming interface for Python, C, and C++."</p>
</li>
</ul>
</li>
</ul>
<h4>2. 英文文法結構逐句分析</h4>
<p>假設有一段來自 Webots 介紹的句子，我會解釋其文法結構。</p>
<h4>例句 1:</h4>
<p>"Webots is an open-source robot simulation software."</p>
<ul>
<li>
<p><strong>Webots</strong>：主詞 (Subject)</p>
</li>
<li>
<p><strong>is</strong>：動詞 (Verb)，是“to be”動詞，表示“是”</p>
</li>
<li>
<p><strong>an open-source robot simulation software</strong>：名詞片語，作為補語 (Complement)，描述 Webots 是什麼樣的軟體。</p>
<ul>
<li>
<p><strong>open-source</strong>：形容詞，表示“開源的”</p>
</li>
<li>
<p><strong>robot simulation</strong>：名詞，表示“機器人模擬”</p>
</li>
<li>
<p><strong>software</strong>：名詞，表示“軟體”</p>
</li>
</ul>
</li>
</ul>
<h4>例句 2:</h4>
<p>"Users can create complex simulations using Webots."</p>
<ul>
<li>
<p><strong>Users</strong>：主詞 (Subject)</p>
</li>
<li>
<p><strong>can create</strong>：情態動詞 "can" + 動詞原形 "create"，表示能力或許可</p>
</li>
<li>
<p><strong>complex simulations</strong>：名詞片語，作為受詞 (Object)，表示用戶可以創建的內容</p>
<ul>
<li>
<p><strong>complex</strong>：形容詞，表示“複雜的”</p>
</li>
<li>
<p><strong>simulations</strong>：名詞，表示“模擬”</p>
</li>
</ul>
</li>
<li>
<p><strong>using Webots</strong>：介系詞片語，表示動作發生的方式或工具，這裡表示是使用 Webots 進行創建。</p>
</li>
</ul>
<h4>例句 3:</h4>
<p>"To begin using Webots, download the software and follow the installation instructions."</p>
<ul>
<li>
<p><strong>To begin using Webots</strong>：不定詞片語，作為動詞 "begin" 的受詞，表示開始的動作。</p>
<ul>
<li>
<p><strong>begin</strong>：動詞，表示“開始”</p>
</li>
<li>
<p><strong>using</strong>：動名詞，表示“使用”</p>
</li>
<li>
<p><strong>Webots</strong>：名詞，表示“Webots”</p>
</li>
</ul>
</li>
<li>
<p><strong>download the software</strong>：命令句，動詞 “download” 命令讀者下載</p>
</li>
<li>
<p><strong>and</strong>：連接詞，連接兩個動作</p>
</li>
<li>
<p><strong>follow the installation instructions</strong>：命令句，動詞 “follow” 命令讀者跟隨指示。</p>
<ul>
<li>
<p><strong>installation instructions</strong>：名詞片語，表示“安裝指示</p>
</li>
</ul>
</li>
</ul>
<p></p>
<h3>問題三</h3>
<h4 class="anchor-header" id="tutorial3appearance20minutes" name="tutorial-3-appearance-20-minutes">Tutorial 3: Appearance (20 Minutes)</h4>
<p>The aim of this tutorial is to familiarize yourself with some nodes related to the graphical rendering. Good looking simulations can be created very quickly when these nodes are used adequately. A good graphics quality does not only enhance the user's experience, it is also essential for simulations where robots perceive their environment (camera image processing, line following, etc.).</p>
<p>The result at the end of this tutorial is shown in<span> </span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#simulation-after-having-setup-the-light-and-the-pbrappearance-nodes">this figure</a>.</p>
<h4 id="indexTitle">Index</h4>
<ul id="index">
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#new-simulation">New Simulation</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#lights">Lights</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#modify-the-appearance-of-the-walls">Modify the Appearance of the Walls</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#add-an-existing-appearance-to-the-ball">Add an Existing Appearance to the Ball</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#add-a-texture-from-disk">Add a Texture from Disk</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#rendering-options">Rendering Options</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#solution-world-file">Solution: World File</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#conclusion">Conclusion</a></li>
</ul>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#new-simulation"><span class="anchor-link-image"></span></a>New Simulation</p>
<blockquote>
<p><strong>Hands-on #1</strong>: From the results of the previous tutorial, create a new simulation called "appearance.wbt" by using the<span> </span><code>File / Save World As...</code><span> </span>menu.</p>
</blockquote>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#lights"><span class="anchor-link-image"></span></a>Lights</p>
<p>The lighting of a world is determined by<span> </span><a href="https://cyberbotics.com/doc/reference/light">Light</a><span> </span>nodes and the<span> </span><a href="https://cyberbotics.com/doc/reference/background">Background</a><span> </span>. There are three types of light nodes: the<span> </span><a href="https://cyberbotics.com/doc/reference/directionallight">DirectionalLight</a>, the<span> </span><a href="https://cyberbotics.com/doc/reference/pointlight">PointLight</a><span> </span>and the<span> </span><a href="https://cyberbotics.com/doc/reference/spotlight">SpotLight</a>. A<span> </span><a href="https://cyberbotics.com/doc/reference/directionallight">DirectionalLight</a><span> </span>simulates a light which is infinitely far (ex: the sun), a<span> </span><a href="https://cyberbotics.com/doc/reference/pointlight">PointLight</a><span> </span>simulates light emitted from a single point (ex: a light bulb), and a<span> </span><a href="https://cyberbotics.com/doc/reference/spotlight">SpotLight</a><span> </span>simulates a conical light (ex: a flashlight).<span> </span><a class="dynamicAnchor" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#comparison-of-the-three-lighting-possible-in-webots-left-directionallight-middle-spotlight-and-right-pointlight">This figure</a><span> </span>shows a comparison between them. Each type of light node can cast shadows. You can find their complete documentation in the<span> </span><a href="https://cyberbotics.com/doc/reference/nodes-and-api-functions">Reference Manual</a>.</p>
<figure name="comparison-of-the-three-lighting-possible-in-webots-left-directionallight-middle-spotlight-and-right-pointlight"><img alt="tutorial_light_comparison.png" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/tutorial_light_comparison.thumbnail.jpg"/>
<figcaption class="anchor-header"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#comparison-of-the-three-lighting-possible-in-webots-left-directionallight-middle-spotlight-and-right-pointlight"><span class="anchor-link-image"></span></a>Comparison of the three lighting possible in Webots. Left DirectionalLight, middle SpotLight and right PointLight.</figcaption>
</figure>
<p>Lights are costly in term of performance and reduce the simulation speed (especially when they cast shadows). Minimizing the number of lights increases the rendering speed. A<span> </span><a href="https://cyberbotics.com/doc/reference/pointlight">PointLight</a><span> </span>is more efficient than a<span> </span><a href="https://cyberbotics.com/doc/reference/spotlight">SpotLight</a>, but less than a<span> </span><a href="https://cyberbotics.com/doc/reference/directionallight">DirectionalLight</a>.</p>
<p>In this simulation, the<span> </span><a href="https://cyberbotics.com/doc/reference/light">Light</a><span> </span>node is not visible in the scene tree because it is contained in the<span> </span><a href="https://webots.cloud/run?url=https://github.com/cyberbotics/webots/blob/released/projects/objects/backgrounds/protos/TexturedBackgroundLight.proto" target="_blank">TexturedBackgroundLight</a><span> </span>PROTO node. It consists of a<span> </span><a href="https://cyberbotics.com/doc/reference/directionallight">DirectionalLight</a><span> </span>whose intensity and direction is computed automatically according to the background of the scene.</p>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#modify-the-appearance-of-the-walls"><span class="anchor-link-image"></span></a>Modify the Appearance of the Walls</p>
<p>The aim of this subsection is to color the walls in blue.</p>
<p>The<span> </span><a href="https://cyberbotics.com/doc/reference/appearance">Appearance</a><span> </span>and<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a><span> </span>nodes of the<span> </span><a href="https://cyberbotics.com/doc/reference/shape">Shape</a><span> </span>node determine the graphical appearance of the object. Among other things, these nodes are responsible for the color and texture of objects.</p>
<p>Prefer<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearances</a><span> </span>for a better rendering as shown in the following comparison.</p>
<figure name="comparison-between-appearance-node-left-and-pbrappearance-node-right"><img alt="tutorial_appearance_comparison.png" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/tutorial_appearance_comparison.thumbnail.jpg"/>
<figcaption class="anchor-header"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#comparison-between-appearance-node-left-and-pbrappearance-node-right"><span class="anchor-link-image"></span></a>Comparison between Appearance node (left) and PBRAppearance node (right).</figcaption>
</figure>
<blockquote>
<p><strong>Hands-on #2</strong>: In the<span> </span><a href="https://cyberbotics.com/doc/reference/shape">Shape</a><span> </span>node representing graphically the first wall, add a<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a><span> </span>node to the<span> </span><code>appearance</code><span> </span>field.</p>
<ol>
<li>Set its<span> </span><code>baseColor</code><span> </span>field to blue using the color selector.</li>
<li>Set its<span> </span><code>metalness</code><span> </span>field to 0 using the field editor.</li>
<li>Finally, set its<span> </span><code>roughness</code><span> </span>field to 0.5 using the field editor.</li>
<li>If the DEF-USE mechanism of the previous tutorial has been correctly implemented, all the walls should turn blue.</li>
</ol>
</blockquote>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#add-an-existing-appearance-to-the-ball"><span class="anchor-link-image"></span></a>Add an Existing Appearance to the Ball</p>
<p>A number of pre-defined<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a><span> </span>are provided in the Webots release.</p>
<blockquote>
<p><strong>Hands-on #3</strong>: Add a pre-defined<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a></p>
<ol>
<li>Select the<span> </span><code>appearance</code><span> </span>field and remove the previously added node. To do this, either press the "delete" button on your keyboard or right-click on the field and select "delete" from the menu. The field should now say "appearance NULL" instead of "appearance PBRAppearance".</li>
<li>Double-click on the field again, then navigate to<span> </span><code>PROTO nodes (Webots Projects)</code>, then<span> </span><code>appearances</code><span> </span>and select<span> </span><code>OldSteel (PBRAppearance)</code>.</li>
</ol>
</blockquote>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#add-a-texture-from-disk"><span class="anchor-link-image"></span></a>Add a Texture from Disk</p>
<p>The aim of this subsection is to apply a locally available texture to the ball. A texture on a rolling object can help to appreciate its movement.</p>
<blockquote>
<p>Hands-on #4: add a locally available texture to the ball.</p>
<ol>
<li>Download the texture available<span> </span><a href="https://raw.githubusercontent.com/cyberbotics/webots/released/projects/default/worlds/textures/red_brick_wall.jpg" target="_blank">here</a><span> </span>and save it to your disk.</li>
<li>Remove the previously added node from the<span> </span><code>appearance</code><span> </span>field and add a<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a><span> </span>node instead.</li>
<li>Add an<span> </span><a href="https://cyberbotics.com/doc/reference/imagetexture">ImageTexture</a><span> </span>node to the<span> </span><code>baseColorMap</code><span> </span>field of the<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a><span> </span>node.</li>
<li>Add an item to the<span> </span><a href="https://cyberbotics.com/doc/reference/imagetexture">ImageTexture</a>'s<span> </span><code>url</code><span> </span>field using the<span> </span><code>Add</code><span> </span>button.</li>
<li>Then set the value of the newly added<span> </span><code>url</code><span> </span>item using the "Select" button.</li>
<li>Follow the path to the location where you saved the texture and select it.</li>
</ol>
</blockquote>
<p>The texture URLs must be defined either relative to the<span> </span><code>worlds</code><span> </span>directory of your project directory or relative to the default project directory<span> </span><a href="https://github.com/cyberbotics/webots/tree/released/projects/default/worlds" target="_blank"><code>WEBOTS_HOME/projects/default/worlds</code></a>.</p>
<p>Open the<span> </span><code>red_brick_wall.jpg</code><span> </span>texture in an image viewer while you observe how it is mapped onto the<span> </span><a href="https://cyberbotics.com/doc/reference/sphere">Sphere</a><span> </span>node in Webots.</p>
<p>Textures are mapped onto Geometry nodes according to predefined<span> </span><strong>UV mapping</strong><span> </span>functions described in the<span> </span><a href="https://cyberbotics.com/doc/reference/imagetexture">Reference Manual</a>. A UV mapping function maps a 2D image representation to a 3D model.</p>
<figure name="simulation-after-having-setup-the-light-and-the-pbrappearance-nodes"><img alt="tutorial_appearance.png" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/tutorial_appearance.thumbnail.jpg"/>
<figcaption class="anchor-header"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#simulation-after-having-setup-the-light-and-the-pbrappearance-nodes"><span class="anchor-link-image"></span></a>Simulation after having setup the Light and the `PBRAppearance` nodes.</figcaption>
</figure>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#rendering-options"><span class="anchor-link-image"></span></a>Rendering Options</p>
<p>Webots offers several rendering modes available in the<span> </span><code>View</code><span> </span>menu.</p>
<blockquote>
<p><strong>Hands-on #5</strong>: View the simulation in wireframe mode by using the<span> </span><code>View / Wireframe Rendering</code><span> </span>menu item. Then restore the plain rendering mode:<span> </span><code>View / Plain Rendering</code>.</p>
</blockquote>
<p>Others rendering features can be helpful:</p>
<ul>
<li>View Coordinates systems:<span> </span><code>View / Optional Rendering / Show Coordinates System</code><span> </span><kbd>ctrl</kbd>-<kbd>F1</kbd></li>
<li>View distance sensor rays:<span> </span><code>View / Optional Rendering / Show DistanceSensor Rays</code><span> </span><kbd>ctrl</kbd>-<kbd>F10</kbd></li>
</ul>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#solution-world-file"><span class="anchor-link-image"></span></a>Solution: World File</p>
<p>To compare your world with the solution, go to your files and find the folder named "my_first_simulation" created in<span> </span><a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots">Tutorial 1</a>, then go to the "worlds" folder and open with a text editor the right world.<span> </span><a href="https://github.com/cyberbotics/webots/tree/released/projects/samples/tutorials/worlds/appearance.wbt" target="_blank">This solution</a><span> </span>as the others is located in the<span> </span><a href="https://github.com/cyberbotics/webots/tree/released/projects/samples/tutorials/worlds/" target="_blank">solution directory</a>.</p>
<p><br/><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-3-appearance#conclusion"><span class="anchor-link-image"></span></a>Conclusion</p>
<p>In this tutorial, you have learned how to set up a good looking environment using the<span> </span><a href="https://cyberbotics.com/doc/reference/pbrappearance">PBRAppearance</a><span> </span>node and the light nodes.</p>
<p>You can go further on this topic by reading the detailed description of these nodes in the<span> </span><code>Reference Manual</code>. This<span> </span><a href="https://github.com/cyberbotics/webots/discussions/5411" target="_blank">FAQ</a><span> </span>will give you a method to efficiently setup these nodes.</p>
<h3>問題四</h3>
<p>以下是您提供的文章中的重要英文單字和用法解釋：</p>
<p><br/>1. <strong>Appearance</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：外觀，表示物體的視覺外形或表面。</p>
</li>
<li>
<p><strong>用法</strong>：The <strong>Appearance</strong> and <strong>PBRAppearance</strong> nodes of the Shape node determine the graphical appearance of the object.</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話中，"Appearance" 指的是影響物體視覺呈現的節點，這些節點可以控制顏色、質感等視覺屬性。</p>
</li>
</ul>
</li>
</ul>
<p><br/>2. <strong>PBRAppearance</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：一種圖形渲染節點，能夠提供更高質量的渲染效果，適合用於更真實的光照與材質效果。</p>
</li>
<li>
<p><strong>用法</strong>：Prefer <strong>PBRAppearance</strong> for a better rendering.</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話建議使用 <strong>PBRAppearance</strong> 節點，因為它能提供更好的渲染效果。</p>
</li>
</ul>
</li>
</ul>
<p><br/>3. <strong>DirectionalLight</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：一種光源節點，模擬無限遠的光源（例如太陽）。</p>
</li>
<li>
<p><strong>用法</strong>：A <strong>DirectionalLight</strong> simulates a light which is infinitely far (ex: the sun).</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話解釋了 <strong>DirectionalLight</strong> 是如何模擬類似太陽的光源，並且不受距離影響。</p>
</li>
</ul>
</li>
</ul>
<p><br/>4. <strong>PointLight</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：一種光源節點，模擬從單一點發射的光（例如燈泡）。</p>
</li>
<li>
<p><strong>用法</strong>：A <strong>PointLight</strong> simulates light emitted from a single point (ex: a light bulb).</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話解釋了 <strong>PointLight</strong> 的工作原理，與 <strong>DirectionalLight</strong> 不同，它的光線是從某個具體位置發射出來的。</p>
</li>
</ul>
</li>
</ul>
<p><br/>5. <strong>SpotLight</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：一種聚光燈光源節點，模擬圓錐形的光束（例如手電筒）。</p>
</li>
<li>
<p><strong>用法</strong>：A <strong>SpotLight</strong> simulates a conical light (ex: a flashlight).</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話指出 <strong>SpotLight</strong> 是模擬集中光束的光源，通常用於強調特定區域。</p>
</li>
</ul>
</li>
</ul>
<p><br/>6. <strong>Light nodes</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：指的是 Webots 中控制燈光的節點，通常用於設定場景中的光源。</p>
</li>
<li>
<p><strong>用法</strong>：The lighting of a world is determined by <strong>Light nodes</strong> and the Background.</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話指出，場景的燈光是由 <strong>Light nodes</strong> 和背景設定所決定的。</p>
</li>
</ul>
</li>
</ul>
<p><br/>7. <strong>Texture</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：紋理，通常是用來增加物體表面細節的圖像或模式。</p>
</li>
<li>
<p><strong>用法</strong>：Add a <strong>Texture</strong> from Disk.</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話指示將磁碟上的圖像作為紋理添加到物體上。</p>
</li>
</ul>
</li>
</ul>
<p><br/>8. <strong>Rendering</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：渲染，指的是將數位模型轉換為視覺圖像的過程。</p>
</li>
<li>
<p><strong>用法</strong>：A good graphics quality does not only enhance the user's experience, it is also essential for simulations where robots perceive their environment (camera image processing, line following, etc.).</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話講述了渲染對於改善用戶體驗和機器人環境感知的重要性。</p>
</li>
</ul>
</li>
</ul>
<p><br/>9. <strong>Wireframe Mode</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：線框模式，指的是在渲染時僅顯示物體的輪廓，而不顯示詳細的表面。</p>
</li>
<li>
<p><strong>用法</strong>：View the simulation in <strong>wireframe mode</strong> by using the View / Wireframe Rendering menu item.</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話指示如何啟用線框模式以查看簡化的物體結構。</p>
</li>
</ul>
</li>
</ul>
<p><br/>10. <strong>World File</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：世界檔案，指的是包含場景和物體設置的檔案，通常是以 <code inline="">.wbt</code> 檔案格式儲存。</p>
</li>
<li>
<p><strong>用法</strong>：To compare your world with the solution, go to your files and find the folder named "my_first_simulation".</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話教導如何找到世界檔案並與解決方案進行比較。</p>
</li>
</ul>
</li>
</ul>
<p><br/>11. <strong>UV Mapping</strong></p>
<ul>
<li>
<p><strong>解釋</strong>：UV映射，將二維圖像（紋理）映射到三維模型表面的一種技術。</p>
</li>
<li>
<p><strong>用法</strong>：Textures are mapped onto Geometry nodes according to predefined <strong>UV mapping</strong> functions.</p>
<ul>
<li>
<p><strong>用法解釋</strong>：這句話說明了如何將紋理應用到幾何物件的表面，並依照預設的 <strong>UV映射</strong> 函數來處理。</p>
</li>
</ul>
</li>
</ul>
<hr/>
<h4>重要文法結構解釋：</h4>
<ol>
<li>
<p><strong>The aim of this tutorial is to familiarize yourself with some nodes related to the graphical rendering.</strong></p>
<ul>
<li>
<p><strong>文法結構</strong>：主語 + is + 不定詞片語</p>
</li>
<li>
<p><strong>解釋</strong>：這句話使用了不定詞片語 "to familiarize yourself" 來表達教程的目的是讓你熟悉與圖形渲染相關的節點。</p>
</li>
</ul>
</li>
<li>
<p><strong>A DirectionalLight simulates a light which is infinitely far (ex: the sun).</strong></p>
<ul>
<li>
<p><strong>文法結構</strong>：名詞 + 動詞 + 關係子句</p>
</li>
<li>
<p><strong>解釋</strong>：這句話介紹了 <strong>DirectionalLight</strong> 的功能，並使用了關係子句 "which is infinitely far" 來解釋 <strong>DirectionalLight</strong> 的特性。</p>
</li>
</ul>
</li>
<li>
<p><strong>Hands-on #1: From the results of the previous tutorial, create a new simulation called "appearance.wbt" by using the File / Save World As... menu.</strong></p>
<ul>
<li>
<p><strong>文法結構</strong>：命令句，動詞原形 + 受詞</p>
</li>
<li>
<p><strong>解釋</strong>：這是一個命令句，指示用戶根據前一教程的結果創建一個新的模擬，並指示如何操作。</p>
</li>
</ul>
</li>
<li>
<p><strong>If the DEF-USE mechanism of the previous tutorial has been correctly implemented, all the walls should turn blue.</strong></p>
<ul>
<li>
<p><strong>文法結構</strong>：條件句 + 主句</p>
</li>
<li>
<p><strong>解釋</strong>：這是條件句，說明如果之前教程中的 DEF-USE 機制已正確實現，那麼所有牆壁應該會變成藍色。</p>
</li>
</ul>
</li>
</ol>
<h3>問題五</h3>
<p>在 Webots 中建立一個場景並進行手動設置，可以分為幾個步驟來完成。以下是根據文章中的一些步驟說明如何手動建立場景，這些步驟包括創建新模擬、設置燈光、修改牆壁的外觀、將現有外觀應用於球體、從磁碟上添加紋理以及設置渲染選項。</p>
<p><br/>1. <strong>創建新模擬 (New Simulation)</strong></p>
<p>首先，我們需要創建一個新的模擬環境。以下是手動創建的步驟：</p>
<ol>
<li>
<p><strong>打開 Webots</strong>。</p>
</li>
<li>
<p><strong>選擇 File / New World</strong> 開啟一個新的場景。</p>
</li>
<li>
<p>為新的世界命名（例如，<code inline="">appearance.wbt</code>），然後保存它。</p>
</li>
</ol>
<p>這樣就會創建一個基礎的世界，你可以在此世界中添加物體、燈光、紋理等。</p>
<p><br/>2. <strong>設置燈光 (Lights)</strong></p>
<p>Webots 支援不同類型的燈光，這裡我們會使用三種燈光節點：<code inline="">DirectionalLight</code>、<code inline="">PointLight</code> 和 <code inline="">SpotLight</code>。設置燈光步驟如下：</p>
<ol>
<li>
<p>在左側的 <strong>Scene Tree</strong> 中右鍵點擊空白處，選擇 <strong>Add / Light</strong>。</p>
</li>
<li>
<p>你可以選擇不同的燈光節點：</p>
<ul>
<li>
<p><strong>DirectionalLight</strong>：模擬太陽光等無限遠的光源。</p>
</li>
<li>
<p><strong>PointLight</strong>：模擬燈泡等從一點發射的光。</p>
</li>
<li>
<p><strong>SpotLight</strong>：模擬手電筒等圓錐形光源。</p>
</li>
</ul>
</li>
<li>
<p>如果要加入陰影，可以在燈光節點中啟用 <strong>cast shadows</strong>。</p>
</li>
</ol>
<h4>進階設置：</h4>
<ul>
<li>
<p>每個燈光節點都可以調整顏色、強度和方向。</p>
</li>
<li>
<p>若要添加背景光，選擇 <strong>TexturedBackgroundLight</strong> 節點來實現背景燈光，這樣燈光強度和方向會根據場景的背景自動計算。</p>
</li>
</ul>
<p><br/>3. <strong>修改牆壁外觀 (Modify the Appearance of the Walls)</strong></p>
<p>為牆壁設定顏色和材質，我們將使用 <code inline="">Appearance</code> 或 <code inline="">PBRAppearance</code> 節點來設置外觀屬性。</p>
<ol>
<li>
<p>找到場景中的牆壁，通常會是 <strong>Shape</strong> 節點。</p>
</li>
<li>
<p>在 <strong>Shape</strong> 節點下，右鍵點擊 <strong>Appearance</strong> 或 <strong>PBRAppearance</strong> 節點。</p>
</li>
<li>
<p>設置以下屬性：</p>
<ul>
<li>
<p>設定 <strong>baseColor</strong> 為藍色（在顏色選擇器中選擇藍色）。</p>
</li>
<li>
<p><strong>metalness</strong> 設為 0，這會讓牆壁顯得更為光滑和不金屬化。</p>
</li>
<li>
<p><strong>roughness</strong> 設為 0.5，這會讓牆壁的質感略為粗糙。</p>
</li>
</ul>
</li>
</ol>
<p>這樣牆壁將會被設置為藍色，並且具有金屬化和粗糙度效果。</p>
<p><br/>4. <strong>為球體添加現有外觀 (Add an Existing Appearance to the Ball)</strong></p>
<p>Webots 提供了一些預定義的 <code inline="">PBRAppearance</code> 外觀，可以直接將其應用到物體上。</p>
<ol>
<li>
<p>找到場景中的球體節點（通常為 <strong>Shape</strong> 節點下的 <strong>Sphere</strong>）。</p>
</li>
<li>
<p>在 <strong>Appearance</strong> 字段中，右鍵點擊並選擇 <strong>Delete</strong> 來刪除當前的外觀。</p>
</li>
<li>
<p>再次點擊 <strong>Appearance</strong> 字段，選擇 <strong>PROTO nodes</strong>，然後選擇 <strong>OldSteel</strong> 或其他預設的外觀。</p>
</li>
<li>
<p>這樣，球體的外觀將會改變，並且應用你選擇的材質。</p>
</li>
</ol>
<p><br/>5. <strong>從磁碟上添加紋理 (Add a Texture from Disk)</strong></p>
<p>為物體添加紋理可以幫助增加真實感，尤其是對於旋轉物體，紋理會更顯得生動。</p>
<ol>
<li>
<p>下載你想要的紋理（例如 <code inline="">red_brick_wall.jpg</code>）。</p>
</li>
<li>
<p>在 Webots 中，選擇場景中的物體（例如，球體）。</p>
</li>
<li>
<p>在 <strong>Appearance</strong> 節點下，刪除當前的外觀。</p>
</li>
<li>
<p>添加 <strong>PBRAppearance</strong> 節點。</p>
</li>
<li>
<p>在 <strong>PBRAppearance</strong> 節點下，選擇 <strong>ImageTexture</strong> 節點，並將其拖放到 <strong>baseColorMap</strong> 欄位。</p>
</li>
<li>
<p>在 <strong>ImageTexture</strong> 的 <strong>url</strong> 字段中，使用 <strong>Add</strong> 按鈕來添加紋理的路徑，選擇剛剛下載的圖像文件。</p>
</li>
<li>
<p>確保圖片的 URL 是正確的，可以是相對路徑指向項目目錄中的 <code inline="">worlds</code> 目錄。</p>
</li>
</ol>
<p>當這些設置完成後，球體將顯示出你所選擇的紋理。</p>
<p><br/>6. <strong>設置渲染選項 (Rendering Options)</strong></p>
<p>Webots 提供了不同的渲染模式來查看模擬效果。</p>
<ol>
<li>
<p>在 Webots 界面中，選擇 <strong>View</strong> 菜單。</p>
</li>
<li>
<p>可以選擇不同的渲染模式：</p>
<ul>
<li>
<p><strong>Wireframe Rendering</strong>：以線框顯示模型，只顯示物體的輪廓。</p>
</li>
<li>
<p><strong>Plain Rendering</strong>：恢復常規渲染模式，顯示物體的完整外觀。</p>
</li>
</ul>
</li>
<li>
<p>還可以啟用其他視覺效果，如：</p>
<ul>
<li>
<p>顯示坐標系統：<strong>View / Optional Rendering / Show Coordinates System</strong>。</p>
</li>
<li>
<p>顯示距離傳感器光線：<strong>View / Optional Rendering / Show DistanceSensor Rays</strong>。</p>
</li>
</ul>
</li>
</ol>
<p>這些渲染模式可以幫助你更好地理解場景中的物體如何互動。</p>
<p><br/>7. <strong>保存和查看結果</strong></p>
<p>完成所有設置後，保存你的世界檔案。你可以通過 <strong>File / Save World</strong> 來保存，並使用 <strong>View</strong> 菜單中的渲染模式來查看最終結果。</p>
<h3>問題六</h3>
<p>好的！讓我們一步一步來介紹如何使用 <strong>Webots</strong> 的圖形介面來建立一個新的場景，並確保過程中不會遺漏任何重要的步驟。這些步驟包括創建新場景、設置燈光、修改物體外觀、應用紋理等。每一步都會有重點提醒，幫助你更順利地完成設置。</p>
<h4>步驟 1：創建新的模擬場景</h4>
<ol>
<li>
<p><strong>開啟 Webots</strong>。</p>
<ul>
<li>
<p>點擊開啟 <strong>Webots</strong> 應用程式。</p>
</li>
</ul>
</li>
<li>
<p><strong>創建新場景</strong>：</p>
<ul>
<li>
<p>點擊畫面上方的 <strong>File</strong> 菜單。</p>
</li>
<li>
<p>選擇 <strong>New World</strong>（新建世界），這樣就會創建一個空的模擬環境。</p>
</li>
</ul>
</li>
<li>
<p><strong>儲存新場景</strong>：</p>
<ul>
<li>
<p>點擊 <strong>File</strong> 菜單中的 <strong>Save World As...</strong>。</p>
</li>
<li>
<p>在對話框中為你的場景命名（例如 <code inline="">appearance.wbt</code>），並選擇儲存的文件夾位置。</p>
</li>
</ul>
</li>
</ol>
<h4>步驟 2：設置燈光</h4>
<ol>
<li>
<p><strong>選擇燈光類型</strong>：</p>
<ul>
<li>
<p>在左側 <strong>Scene Tree</strong> 中，右鍵點擊 <strong>root</strong>（根節點），選擇 <strong>Add / Light</strong> 來添加燈光節點。</p>
</li>
<li>
<p>會彈出一個對話框，讓你選擇燈光的類型，常見的燈光類型有：</p>
<ul>
<li>
<p><strong>DirectionalLight</strong>：模擬太陽等遠距離光源。</p>
</li>
<li>
<p><strong>PointLight</strong>：模擬燈泡等來自單一點的光源。</p>
</li>
<li>
<p><strong>SpotLight</strong>：模擬聚光燈等圓錐形光源。</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>設置燈光屬性</strong>：</p>
<ul>
<li>
<p>在 <strong>Scene Tree</strong> 中選擇剛剛添加的燈光節點。</p>
</li>
<li>
<p>在右側的 <strong>Properties</strong> 視窗中，你可以調整燈光的顏色、強度等屬性。</p>
</li>
<li>
<p>注意 <strong>cast shadows</strong>（投射陰影）選項，如果開啟，會影響模擬的效能，尤其是在有多個燈光和大場景中。</p>
</li>
</ul>
<p><strong>要點提醒</strong>：</p>
<ul>
<li>
<p><strong>DirectionalLight</strong> 是最常用的光源，適合模擬太陽光。</p>
</li>
<li>
<p>在較大的模擬中，建議限制燈光的數量，特別是使用 <strong>SpotLight</strong> 和 <strong>PointLight</strong> 時，因為它們較為耗費計算資源。</p>
</li>
</ul>
</li>
</ol>
<h4>步驟 3：修改牆壁外觀</h4>
<ol>
<li>
<p><strong>選擇牆壁</strong>：</p>
<ul>
<li>
<p>在 <strong>Scene Tree</strong> 中，找到 <strong>Shape</strong> 節點，這是代表牆壁的節點。如果是預設範例，牆壁應該已經存在。</p>
</li>
</ul>
</li>
<li>
<p><strong>添加外觀節點</strong>：</p>
<ul>
<li>
<p>在 <strong>Shape</strong> 節點下，右鍵點擊並選擇 <strong>Add / Appearance</strong> 或 <strong>Add / PBRAppearance</strong>。建議使用 <strong>PBRAppearance</strong>，它能提供更真實的渲染效果。</p>
</li>
<li>
<p>在 <strong>PBRAppearance</strong> 節點下，你會看到一些屬性可以設置，例如顏色（<strong>baseColor</strong>）和光滑度（<strong>roughness</strong>）。</p>
</li>
</ul>
</li>
<li>
<p><strong>設置外觀屬性</strong>：</p>
<ul>
<li>
<p>設定 <strong>baseColor</strong> 為藍色（點擊顏色選擇器並選擇藍色）。</p>
</li>
<li>
<p>設定 <strong>metalness</strong> 為 0（這會讓牆壁看起來不具金屬感）。</p>
</li>
<li>
<p>設定 <strong>roughness</strong> 為 0.5（這會讓牆壁看起來有一定的粗糙感）。</p>
</li>
</ul>
<p><strong>要點提醒</strong>：</p>
<ul>
<li>
<p>使用 <strong>PBRAppearance</strong> 節點可以獲得更真實的光照效果，這在渲染物體時非常重要。</p>
</li>
<li>
<p>設定顏色和材質屬性時要注意光滑度和金屬感的平衡，這將影響最終效果。</p>
</li>
</ul>
</li>
</ol>
<h4>步驟 4：為球體添加現有外觀</h4>
<ol>
<li>
<p><strong>選擇球體</strong>：</p>
<ul>
<li>
<p>在 <strong>Scene Tree</strong> 中，找到代表球體的節點，通常是 <strong>Shape</strong> 節點下的 <strong>Sphere</strong>。</p>
</li>
</ul>
</li>
<li>
<p><strong>刪除現有外觀</strong>：</p>
<ul>
<li>
<p>在 <strong>Appearance</strong> 欄位中，右鍵選擇 <strong>Delete</strong> 刪除當前的外觀節點。</p>
</li>
</ul>
</li>
<li>
<p><strong>選擇預設外觀</strong>：</p>
<ul>
<li>
<p>在 <strong>Appearance</strong> 欄位中再次點擊並選擇 <strong>PROTO nodes</strong> → <strong>Webots Projects</strong> → <strong>appearances</strong> → 選擇一個預設的外觀（例如 <strong>OldSteel</strong>）。</p>
</li>
</ul>
<p><strong>要點提醒</strong>：</p>
<ul>
<li>
<p>當選擇預設外觀時，請確保選擇的是 <strong>PBRAppearance</strong> 類型的外觀，它能提供更高質量的渲染效果。</p>
</li>
</ul>
</li>
</ol>
<h4>步驟 5：從磁碟上添加紋理</h4>
<ol>
<li>
<p><strong>下載紋理</strong>：</p>
<ul>
<li>
<p>下載你想用的紋理圖片，例如 <code inline="">red_brick_wall.jpg</code>，並保存到你的電腦上。</p>
</li>
</ul>
</li>
<li>
<p><strong>為球體添加紋理</strong>：</p>
<ul>
<li>
<p>在 <strong>Appearance</strong> 欄位中，刪除現有的節點並選擇 <strong>PBRAppearance</strong> 節點。</p>
</li>
<li>
<p>在 <strong>PBRAppearance</strong> 節點中，找到 <strong>baseColorMap</strong> 欄位，並在其中添加 <strong>ImageTexture</strong> 節點。</p>
</li>
</ul>
</li>
<li>
<p><strong>設置紋理</strong>：</p>
<ul>
<li>
<p>在 <strong>ImageTexture</strong> 節點中，點擊 <strong>url</strong> 欄位的 <strong>Add</strong> 按鈕，選擇你的紋理圖片。</p>
</li>
<li>
<p>確保圖片的路徑是正確的，可以使用相對路徑，指向你的 <code inline="">worlds</code> 目錄或其他對應的目錄。</p>
</li>
</ul>
</li>
<li>
<p><strong>檢視紋理效果</strong>：</p>
<ul>
<li>
<p>在 Webots 模擬窗口中，你可以看到紋理被映射到球體表面。</p>
</li>
</ul>
<p><strong>要點提醒</strong>：</p>
<ul>
<li>
<p>確保紋理的路徑設置正確，Webots 支援相對路徑的設定。</p>
</li>
<li>
<p>當紋理應用於動態物體時，能夠讓物體的運動更具真實感。</p>
</li>
</ul>
</li>
</ol>
<h4>步驟 6：設定渲染模式</h4>
<ol>
<li>
<p><strong>啟用線框模式</strong>：</p>
<ul>
<li>
<p>在 Webots 的視圖中，點擊 <strong>View</strong> 菜單。</p>
</li>
<li>
<p>選擇 <strong>Wireframe Rendering</strong>，此時所有物體將以線框模式顯示。</p>
</li>
</ul>
</li>
<li>
<p><strong>恢復正常模式</strong>：</p>
<ul>
<li>
<p>之後，選擇 <strong>View / Plain Rendering</strong> 恢復正常的渲染模式。</p>
</li>
</ul>
</li>
<li>
<p><strong>顯示其他視覺效果</strong>：</p>
<ul>
<li>
<p>你還可以選擇顯示其他視覺效果，例如坐標系統（<strong>View / Optional Rendering / Show Coordinates System</strong>）或距離傳感器光線（<strong>View / Optional Rendering / Show DistanceSensor Rays</strong>）。</p>
</li>
</ul>
<p><strong>要點提醒</strong>：</p>
<ul>
<li>
<p>渲染模式選項可以幫助你更好地理解物體的結構和行為，尤其在進行調試和測試時非常有用。</p>
</li>
</ul>
</li>
</ol>
<h4>步驟 7：保存並查看結果</h4>
<ol>
<li>
<p><strong>保存模擬場景</strong>：</p>
<ul>
<li>
<p>點擊 <strong>File / Save World</strong> 保存當前的場景設置。</p>
</li>
</ul>
</li>
<li>
<p><strong>檢視模擬</strong>：</p>
<ul>
<li>
<p>在 Webots 的視圖中查看最終效果，並根據需要進行調整。</p>
</li>
</ul>
</li>
</ol>
<hr/>
<h4>重點提醒：</h4>
<ol>
<li>
<p><strong>燈光設置</strong>：過多的光源會影響模擬效能，尤其是在複雜的場景中。建議簡化光源設置，並只使用必要的光源類型。</p>
</li>
<li>
<p><strong>外觀和紋理</strong>：使用 <strong>PBRAppearance</strong> 節點能提供更真實的材質效果，並且能支持更高質量的渲染效果，適合大多數物體。</p>
</li>
<li>
<p><strong>紋理的路徑</strong>：確保在添加紋理時，路徑設置正確，否則紋理可能無法正確顯示。</p>
</li>
</ol>
<p></p>
<h2>task6</h2>
<h4>Webots Tutorial 4 ~6 (HW3)</h4><h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/roQexYsbFkg" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41023216" width="666"></iframe></p>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/tCLktsdc8WY" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41023216" width="666"></iframe></p>
<p></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p>
<h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>w1使用github設置key跟建立倉儲</p>
<p>w2新增token 新增各組員網站及倉儲 自行建立可熙並錄製影片</p>
<p>w3建立ssh以及在更新list ipv6</p>
<p>w4 完成ipv6的</p>
<p>w5</p>
<p>w6</p>
<p>w7</p>
<p>w8</p>
<p>w9</p>
<p>各週網頁內容:</p>
<p>期中心得:</p>
<p>這次上課每次準時到班上課，無任何缺席，老師要求的都有在努力在跟上</p>
<p>期中自評影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="351" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/uGqWorziQ2c" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 41023216" width="653"></iframe></p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<p h2=""><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p h2=""><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p h2=""><!-- editor1 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p h2=""><!-- editor1 結束 --></p>
<hr/>
<p h2=""><!-- ########################################## --></p>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p h2=""><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p h2=""><!-- editor2 結束 --></p>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>